// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: business.proto

#ifndef PROTOBUF_business_2eproto__INCLUDED
#define PROTOBUF_business_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_business_2eproto();
void protobuf_AssignDesc_business_2eproto();
void protobuf_ShutdownFile_business_2eproto();

class client_login_content;
class mobile_login_content;
class druggist_login_content;
class doctor_login_content;
class login_response_content;
class match_wait_content;
class match_success_content;
class match_failure_content;
class business_content;
class monitor_info_content;
class proxy_heartbeat_content;

// ===================================================================

class client_login_content : public ::google::protobuf::Message {
 public:
  client_login_content();
  virtual ~client_login_content();

  client_login_content(const client_login_content& from);

  inline client_login_content& operator=(const client_login_content& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const client_login_content& default_instance();

  void Swap(client_login_content* other);

  // implements Message ----------------------------------------------

  client_login_content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const client_login_content& from);
  void MergeFrom(const client_login_content& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string mac = 2;
  inline bool has_mac() const;
  inline void clear_mac();
  static const int kMacFieldNumber = 2;
  inline const ::std::string& mac() const;
  inline void set_mac(const ::std::string& value);
  inline void set_mac(const char* value);
  inline void set_mac(const char* value, size_t size);
  inline ::std::string* mutable_mac();
  inline ::std::string* release_mac();
  inline void set_allocated_mac(::std::string* mac);

  // required int32 need_strategy = 3;
  inline bool has_need_strategy() const;
  inline void clear_need_strategy();
  static const int kNeedStrategyFieldNumber = 3;
  inline ::google::protobuf::int32 need_strategy() const;
  inline void set_need_strategy(::google::protobuf::int32 value);

  // optional string druggist_id = 4;
  inline bool has_druggist_id() const;
  inline void clear_druggist_id();
  static const int kDruggistIdFieldNumber = 4;
  inline const ::std::string& druggist_id() const;
  inline void set_druggist_id(const ::std::string& value);
  inline void set_druggist_id(const char* value);
  inline void set_druggist_id(const char* value, size_t size);
  inline ::std::string* mutable_druggist_id();
  inline ::std::string* release_druggist_id();
  inline void set_allocated_druggist_id(::std::string* druggist_id);

  // @@protoc_insertion_point(class_scope:client_login_content)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_mac();
  inline void clear_has_mac();
  inline void set_has_need_strategy();
  inline void clear_has_need_strategy();
  inline void set_has_druggist_id();
  inline void clear_has_druggist_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* mac_;
  ::std::string* druggist_id_;
  ::google::protobuf::int32 need_strategy_;
  friend void  protobuf_AddDesc_business_2eproto();
  friend void protobuf_AssignDesc_business_2eproto();
  friend void protobuf_ShutdownFile_business_2eproto();

  void InitAsDefaultInstance();
  static client_login_content* default_instance_;
};
// -------------------------------------------------------------------

class mobile_login_content : public ::google::protobuf::Message {
 public:
  mobile_login_content();
  virtual ~mobile_login_content();

  mobile_login_content(const mobile_login_content& from);

  inline mobile_login_content& operator=(const mobile_login_content& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mobile_login_content& default_instance();

  void Swap(mobile_login_content* other);

  // implements Message ----------------------------------------------

  mobile_login_content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mobile_login_content& from);
  void MergeFrom(const mobile_login_content& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 need_stratey = 1;
  inline bool has_need_stratey() const;
  inline void clear_need_stratey();
  static const int kNeedStrateyFieldNumber = 1;
  inline ::google::protobuf::int32 need_stratey() const;
  inline void set_need_stratey(::google::protobuf::int32 value);

  // optional string phone_num = 2;
  inline bool has_phone_num() const;
  inline void clear_phone_num();
  static const int kPhoneNumFieldNumber = 2;
  inline const ::std::string& phone_num() const;
  inline void set_phone_num(const ::std::string& value);
  inline void set_phone_num(const char* value);
  inline void set_phone_num(const char* value, size_t size);
  inline ::std::string* mutable_phone_num();
  inline ::std::string* release_phone_num();
  inline void set_allocated_phone_num(::std::string* phone_num);

  // optional string device_id = 3;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 3;
  inline const ::std::string& device_id() const;
  inline void set_device_id(const ::std::string& value);
  inline void set_device_id(const char* value);
  inline void set_device_id(const char* value, size_t size);
  inline ::std::string* mutable_device_id();
  inline ::std::string* release_device_id();
  inline void set_allocated_device_id(::std::string* device_id);

  // optional string specifiy_id = 4;
  inline bool has_specifiy_id() const;
  inline void clear_specifiy_id();
  static const int kSpecifiyIdFieldNumber = 4;
  inline const ::std::string& specifiy_id() const;
  inline void set_specifiy_id(const ::std::string& value);
  inline void set_specifiy_id(const char* value);
  inline void set_specifiy_id(const char* value, size_t size);
  inline ::std::string* mutable_specifiy_id();
  inline ::std::string* release_specifiy_id();
  inline void set_allocated_specifiy_id(::std::string* specifiy_id);

  // optional string json_value = 5;
  inline bool has_json_value() const;
  inline void clear_json_value();
  static const int kJsonValueFieldNumber = 5;
  inline const ::std::string& json_value() const;
  inline void set_json_value(const ::std::string& value);
  inline void set_json_value(const char* value);
  inline void set_json_value(const char* value, size_t size);
  inline ::std::string* mutable_json_value();
  inline ::std::string* release_json_value();
  inline void set_allocated_json_value(::std::string* json_value);

  // @@protoc_insertion_point(class_scope:mobile_login_content)
 private:
  inline void set_has_need_stratey();
  inline void clear_has_need_stratey();
  inline void set_has_phone_num();
  inline void clear_has_phone_num();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_specifiy_id();
  inline void clear_has_specifiy_id();
  inline void set_has_json_value();
  inline void clear_has_json_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* phone_num_;
  ::std::string* device_id_;
  ::std::string* specifiy_id_;
  ::std::string* json_value_;
  ::google::protobuf::int32 need_stratey_;
  friend void  protobuf_AddDesc_business_2eproto();
  friend void protobuf_AssignDesc_business_2eproto();
  friend void protobuf_ShutdownFile_business_2eproto();

  void InitAsDefaultInstance();
  static mobile_login_content* default_instance_;
};
// -------------------------------------------------------------------

class druggist_login_content : public ::google::protobuf::Message {
 public:
  druggist_login_content();
  virtual ~druggist_login_content();

  druggist_login_content(const druggist_login_content& from);

  inline druggist_login_content& operator=(const druggist_login_content& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const druggist_login_content& default_instance();

  void Swap(druggist_login_content* other);

  // implements Message ----------------------------------------------

  druggist_login_content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const druggist_login_content& from);
  void MergeFrom(const druggist_login_content& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string company_name = 2;
  inline bool has_company_name() const;
  inline void clear_company_name();
  static const int kCompanyNameFieldNumber = 2;
  inline const ::std::string& company_name() const;
  inline void set_company_name(const ::std::string& value);
  inline void set_company_name(const char* value);
  inline void set_company_name(const char* value, size_t size);
  inline ::std::string* mutable_company_name();
  inline ::std::string* release_company_name();
  inline void set_allocated_company_name(::std::string* company_name);

  // required int32 druggist_type = 3;
  inline bool has_druggist_type() const;
  inline void clear_druggist_type();
  static const int kDruggistTypeFieldNumber = 3;
  inline ::google::protobuf::int32 druggist_type() const;
  inline void set_druggist_type(::google::protobuf::int32 value);

  // required string druggist_id = 4;
  inline bool has_druggist_id() const;
  inline void clear_druggist_id();
  static const int kDruggistIdFieldNumber = 4;
  inline const ::std::string& druggist_id() const;
  inline void set_druggist_id(const ::std::string& value);
  inline void set_druggist_id(const char* value);
  inline void set_druggist_id(const char* value, size_t size);
  inline ::std::string* mutable_druggist_id();
  inline ::std::string* release_druggist_id();
  inline void set_allocated_druggist_id(::std::string* druggist_id);

  // @@protoc_insertion_point(class_scope:druggist_login_content)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_company_name();
  inline void clear_has_company_name();
  inline void set_has_druggist_type();
  inline void clear_has_druggist_type();
  inline void set_has_druggist_id();
  inline void clear_has_druggist_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* company_name_;
  ::std::string* druggist_id_;
  ::google::protobuf::int32 druggist_type_;
  friend void  protobuf_AddDesc_business_2eproto();
  friend void protobuf_AssignDesc_business_2eproto();
  friend void protobuf_ShutdownFile_business_2eproto();

  void InitAsDefaultInstance();
  static druggist_login_content* default_instance_;
};
// -------------------------------------------------------------------

class doctor_login_content : public ::google::protobuf::Message {
 public:
  doctor_login_content();
  virtual ~doctor_login_content();

  doctor_login_content(const doctor_login_content& from);

  inline doctor_login_content& operator=(const doctor_login_content& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const doctor_login_content& default_instance();

  void Swap(doctor_login_content* other);

  // implements Message ----------------------------------------------

  doctor_login_content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const doctor_login_content& from);
  void MergeFrom(const doctor_login_content& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string company_name = 2;
  inline bool has_company_name() const;
  inline void clear_company_name();
  static const int kCompanyNameFieldNumber = 2;
  inline const ::std::string& company_name() const;
  inline void set_company_name(const ::std::string& value);
  inline void set_company_name(const char* value);
  inline void set_company_name(const char* value, size_t size);
  inline ::std::string* mutable_company_name();
  inline ::std::string* release_company_name();
  inline void set_allocated_company_name(::std::string* company_name);

  // required int32 doctor_type = 3;
  inline bool has_doctor_type() const;
  inline void clear_doctor_type();
  static const int kDoctorTypeFieldNumber = 3;
  inline ::google::protobuf::int32 doctor_type() const;
  inline void set_doctor_type(::google::protobuf::int32 value);

  // required string id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string json_value = 5;
  inline bool has_json_value() const;
  inline void clear_json_value();
  static const int kJsonValueFieldNumber = 5;
  inline const ::std::string& json_value() const;
  inline void set_json_value(const ::std::string& value);
  inline void set_json_value(const char* value);
  inline void set_json_value(const char* value, size_t size);
  inline ::std::string* mutable_json_value();
  inline ::std::string* release_json_value();
  inline void set_allocated_json_value(::std::string* json_value);

  // @@protoc_insertion_point(class_scope:doctor_login_content)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_company_name();
  inline void clear_has_company_name();
  inline void set_has_doctor_type();
  inline void clear_has_doctor_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_json_value();
  inline void clear_has_json_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* company_name_;
  ::std::string* id_;
  ::std::string* json_value_;
  ::google::protobuf::int32 doctor_type_;
  friend void  protobuf_AddDesc_business_2eproto();
  friend void protobuf_AssignDesc_business_2eproto();
  friend void protobuf_ShutdownFile_business_2eproto();

  void InitAsDefaultInstance();
  static doctor_login_content* default_instance_;
};
// -------------------------------------------------------------------

class login_response_content : public ::google::protobuf::Message {
 public:
  login_response_content();
  virtual ~login_response_content();

  login_response_content(const login_response_content& from);

  inline login_response_content& operator=(const login_response_content& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const login_response_content& default_instance();

  void Swap(login_response_content* other);

  // implements Message ----------------------------------------------

  login_response_content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const login_response_content& from);
  void MergeFrom(const login_response_content& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 rt_value = 1;
  inline bool has_rt_value() const;
  inline void clear_rt_value();
  static const int kRtValueFieldNumber = 1;
  inline ::google::protobuf::int32 rt_value() const;
  inline void set_rt_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:login_response_content)
 private:
  inline void set_has_rt_value();
  inline void clear_has_rt_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 rt_value_;
  friend void  protobuf_AddDesc_business_2eproto();
  friend void protobuf_AssignDesc_business_2eproto();
  friend void protobuf_ShutdownFile_business_2eproto();

  void InitAsDefaultInstance();
  static login_response_content* default_instance_;
};
// -------------------------------------------------------------------

class match_wait_content : public ::google::protobuf::Message {
 public:
  match_wait_content();
  virtual ~match_wait_content();

  match_wait_content(const match_wait_content& from);

  inline match_wait_content& operator=(const match_wait_content& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const match_wait_content& default_instance();

  void Swap(match_wait_content* other);

  // implements Message ----------------------------------------------

  match_wait_content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const match_wait_content& from);
  void MergeFrom(const match_wait_content& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 wait_count = 1;
  inline bool has_wait_count() const;
  inline void clear_wait_count();
  static const int kWaitCountFieldNumber = 1;
  inline ::google::protobuf::int32 wait_count() const;
  inline void set_wait_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:match_wait_content)
 private:
  inline void set_has_wait_count();
  inline void clear_has_wait_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 wait_count_;
  friend void  protobuf_AddDesc_business_2eproto();
  friend void protobuf_AssignDesc_business_2eproto();
  friend void protobuf_ShutdownFile_business_2eproto();

  void InitAsDefaultInstance();
  static match_wait_content* default_instance_;
};
// -------------------------------------------------------------------

class match_success_content : public ::google::protobuf::Message {
 public:
  match_success_content();
  virtual ~match_success_content();

  match_success_content(const match_success_content& from);

  inline match_success_content& operator=(const match_success_content& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const match_success_content& default_instance();

  void Swap(match_success_content* other);

  // implements Message ----------------------------------------------

  match_success_content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const match_success_content& from);
  void MergeFrom(const match_success_content& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 business_id = 1;
  inline bool has_business_id() const;
  inline void clear_business_id();
  static const int kBusinessIdFieldNumber = 1;
  inline ::google::protobuf::int32 business_id() const;
  inline void set_business_id(::google::protobuf::int32 value);

  // required string proxy_server_ip = 2;
  inline bool has_proxy_server_ip() const;
  inline void clear_proxy_server_ip();
  static const int kProxyServerIpFieldNumber = 2;
  inline const ::std::string& proxy_server_ip() const;
  inline void set_proxy_server_ip(const ::std::string& value);
  inline void set_proxy_server_ip(const char* value);
  inline void set_proxy_server_ip(const char* value, size_t size);
  inline ::std::string* mutable_proxy_server_ip();
  inline ::std::string* release_proxy_server_ip();
  inline void set_allocated_proxy_server_ip(::std::string* proxy_server_ip);

  // required int32 proxy_server_port = 3;
  inline bool has_proxy_server_port() const;
  inline void clear_proxy_server_port();
  static const int kProxyServerPortFieldNumber = 3;
  inline ::google::protobuf::int32 proxy_server_port() const;
  inline void set_proxy_server_port(::google::protobuf::int32 value);

  // optional string json_value = 4;
  inline bool has_json_value() const;
  inline void clear_json_value();
  static const int kJsonValueFieldNumber = 4;
  inline const ::std::string& json_value() const;
  inline void set_json_value(const ::std::string& value);
  inline void set_json_value(const char* value);
  inline void set_json_value(const char* value, size_t size);
  inline ::std::string* mutable_json_value();
  inline ::std::string* release_json_value();
  inline void set_allocated_json_value(::std::string* json_value);

  // optional string druggist_account = 5;
  inline bool has_druggist_account() const;
  inline void clear_druggist_account();
  static const int kDruggistAccountFieldNumber = 5;
  inline const ::std::string& druggist_account() const;
  inline void set_druggist_account(const ::std::string& value);
  inline void set_druggist_account(const char* value);
  inline void set_druggist_account(const char* value, size_t size);
  inline ::std::string* mutable_druggist_account();
  inline ::std::string* release_druggist_account();
  inline void set_allocated_druggist_account(::std::string* druggist_account);

  // @@protoc_insertion_point(class_scope:match_success_content)
 private:
  inline void set_has_business_id();
  inline void clear_has_business_id();
  inline void set_has_proxy_server_ip();
  inline void clear_has_proxy_server_ip();
  inline void set_has_proxy_server_port();
  inline void clear_has_proxy_server_port();
  inline void set_has_json_value();
  inline void clear_has_json_value();
  inline void set_has_druggist_account();
  inline void clear_has_druggist_account();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* proxy_server_ip_;
  ::google::protobuf::int32 business_id_;
  ::google::protobuf::int32 proxy_server_port_;
  ::std::string* json_value_;
  ::std::string* druggist_account_;
  friend void  protobuf_AddDesc_business_2eproto();
  friend void protobuf_AssignDesc_business_2eproto();
  friend void protobuf_ShutdownFile_business_2eproto();

  void InitAsDefaultInstance();
  static match_success_content* default_instance_;
};
// -------------------------------------------------------------------

class match_failure_content : public ::google::protobuf::Message {
 public:
  match_failure_content();
  virtual ~match_failure_content();

  match_failure_content(const match_failure_content& from);

  inline match_failure_content& operator=(const match_failure_content& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const match_failure_content& default_instance();

  void Swap(match_failure_content* other);

  // implements Message ----------------------------------------------

  match_failure_content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const match_failure_content& from);
  void MergeFrom(const match_failure_content& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 match_error = 1;
  inline bool has_match_error() const;
  inline void clear_match_error();
  static const int kMatchErrorFieldNumber = 1;
  inline ::google::protobuf::int32 match_error() const;
  inline void set_match_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:match_failure_content)
 private:
  inline void set_has_match_error();
  inline void clear_has_match_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 match_error_;
  friend void  protobuf_AddDesc_business_2eproto();
  friend void protobuf_AssignDesc_business_2eproto();
  friend void protobuf_ShutdownFile_business_2eproto();

  void InitAsDefaultInstance();
  static match_failure_content* default_instance_;
};
// -------------------------------------------------------------------

class business_content : public ::google::protobuf::Message {
 public:
  business_content();
  virtual ~business_content();

  business_content(const business_content& from);

  inline business_content& operator=(const business_content& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const business_content& default_instance();

  void Swap(business_content* other);

  // implements Message ----------------------------------------------

  business_content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const business_content& from);
  void MergeFrom(const business_content& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 business_id = 1;
  inline bool has_business_id() const;
  inline void clear_business_id();
  static const int kBusinessIdFieldNumber = 1;
  inline ::google::protobuf::int32 business_id() const;
  inline void set_business_id(::google::protobuf::int32 value);

  // optional string json_value = 2;
  inline bool has_json_value() const;
  inline void clear_json_value();
  static const int kJsonValueFieldNumber = 2;
  inline const ::std::string& json_value() const;
  inline void set_json_value(const ::std::string& value);
  inline void set_json_value(const char* value);
  inline void set_json_value(const char* value, size_t size);
  inline ::std::string* mutable_json_value();
  inline ::std::string* release_json_value();
  inline void set_allocated_json_value(::std::string* json_value);

  // optional int32 int_value = 3;
  inline bool has_int_value() const;
  inline void clear_int_value();
  static const int kIntValueFieldNumber = 3;
  inline ::google::protobuf::int32 int_value() const;
  inline void set_int_value(::google::protobuf::int32 value);

  // optional string string_value = 4;
  inline bool has_string_value() const;
  inline void clear_string_value();
  static const int kStringValueFieldNumber = 4;
  inline const ::std::string& string_value() const;
  inline void set_string_value(const ::std::string& value);
  inline void set_string_value(const char* value);
  inline void set_string_value(const char* value, size_t size);
  inline ::std::string* mutable_string_value();
  inline ::std::string* release_string_value();
  inline void set_allocated_string_value(::std::string* string_value);

  // @@protoc_insertion_point(class_scope:business_content)
 private:
  inline void set_has_business_id();
  inline void clear_has_business_id();
  inline void set_has_json_value();
  inline void clear_has_json_value();
  inline void set_has_int_value();
  inline void clear_has_int_value();
  inline void set_has_string_value();
  inline void clear_has_string_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* json_value_;
  ::google::protobuf::int32 business_id_;
  ::google::protobuf::int32 int_value_;
  ::std::string* string_value_;
  friend void  protobuf_AddDesc_business_2eproto();
  friend void protobuf_AssignDesc_business_2eproto();
  friend void protobuf_ShutdownFile_business_2eproto();

  void InitAsDefaultInstance();
  static business_content* default_instance_;
};
// -------------------------------------------------------------------

class monitor_info_content : public ::google::protobuf::Message {
 public:
  monitor_info_content();
  virtual ~monitor_info_content();

  monitor_info_content(const monitor_info_content& from);

  inline monitor_info_content& operator=(const monitor_info_content& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const monitor_info_content& default_instance();

  void Swap(monitor_info_content* other);

  // implements Message ----------------------------------------------

  monitor_info_content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const monitor_info_content& from);
  void MergeFrom(const monitor_info_content& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::std::string& infos(int index) const;
  inline ::std::string* mutable_infos(int index);
  inline void set_infos(int index, const ::std::string& value);
  inline void set_infos(int index, const char* value);
  inline void set_infos(int index, const char* value, size_t size);
  inline ::std::string* add_infos();
  inline void add_infos(const ::std::string& value);
  inline void add_infos(const char* value);
  inline void add_infos(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_infos();

  // @@protoc_insertion_point(class_scope:monitor_info_content)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> infos_;
  friend void  protobuf_AddDesc_business_2eproto();
  friend void protobuf_AssignDesc_business_2eproto();
  friend void protobuf_ShutdownFile_business_2eproto();

  void InitAsDefaultInstance();
  static monitor_info_content* default_instance_;
};
// -------------------------------------------------------------------

class proxy_heartbeat_content : public ::google::protobuf::Message {
 public:
  proxy_heartbeat_content();
  virtual ~proxy_heartbeat_content();

  proxy_heartbeat_content(const proxy_heartbeat_content& from);

  inline proxy_heartbeat_content& operator=(const proxy_heartbeat_content& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const proxy_heartbeat_content& default_instance();

  void Swap(proxy_heartbeat_content* other);

  // implements Message ----------------------------------------------

  proxy_heartbeat_content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const proxy_heartbeat_content& from);
  void MergeFrom(const proxy_heartbeat_content& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 thread_count = 1;
  inline bool has_thread_count() const;
  inline void clear_thread_count();
  static const int kThreadCountFieldNumber = 1;
  inline ::google::protobuf::int32 thread_count() const;
  inline void set_thread_count(::google::protobuf::int32 value);

  // repeated int32 udp_port = 2;
  inline int udp_port_size() const;
  inline void clear_udp_port();
  static const int kUdpPortFieldNumber = 2;
  inline ::google::protobuf::int32 udp_port(int index) const;
  inline void set_udp_port(int index, ::google::protobuf::int32 value);
  inline void add_udp_port(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      udp_port() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_udp_port();

  // repeated int32 business_count = 3;
  inline int business_count_size() const;
  inline void clear_business_count();
  static const int kBusinessCountFieldNumber = 3;
  inline ::google::protobuf::int32 business_count(int index) const;
  inline void set_business_count(int index, ::google::protobuf::int32 value);
  inline void add_business_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      business_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_business_count();

  // @@protoc_insertion_point(class_scope:proxy_heartbeat_content)
 private:
  inline void set_has_thread_count();
  inline void clear_has_thread_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > udp_port_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > business_count_;
  ::google::protobuf::int32 thread_count_;
  friend void  protobuf_AddDesc_business_2eproto();
  friend void protobuf_AssignDesc_business_2eproto();
  friend void protobuf_ShutdownFile_business_2eproto();

  void InitAsDefaultInstance();
  static proxy_heartbeat_content* default_instance_;
};
// ===================================================================


// ===================================================================

// client_login_content

// required string name = 1;
inline bool client_login_content::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void client_login_content::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void client_login_content::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void client_login_content::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& client_login_content::name() const {
  // @@protoc_insertion_point(field_get:client_login_content.name)
  return *name_;
}
inline void client_login_content::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:client_login_content.name)
}
inline void client_login_content::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:client_login_content.name)
}
inline void client_login_content::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client_login_content.name)
}
inline ::std::string* client_login_content::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client_login_content.name)
  return name_;
}
inline ::std::string* client_login_content::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void client_login_content::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client_login_content.name)
}

// required string mac = 2;
inline bool client_login_content::has_mac() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void client_login_content::set_has_mac() {
  _has_bits_[0] |= 0x00000002u;
}
inline void client_login_content::clear_has_mac() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void client_login_content::clear_mac() {
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_->clear();
  }
  clear_has_mac();
}
inline const ::std::string& client_login_content::mac() const {
  // @@protoc_insertion_point(field_get:client_login_content.mac)
  return *mac_;
}
inline void client_login_content::set_mac(const ::std::string& value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
  // @@protoc_insertion_point(field_set:client_login_content.mac)
}
inline void client_login_content::set_mac(const char* value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
  // @@protoc_insertion_point(field_set_char:client_login_content.mac)
}
inline void client_login_content::set_mac(const char* value, size_t size) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  mac_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client_login_content.mac)
}
inline ::std::string* client_login_content::mutable_mac() {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client_login_content.mac)
  return mac_;
}
inline ::std::string* client_login_content::release_mac() {
  clear_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mac_;
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void client_login_content::set_allocated_mac(::std::string* mac) {
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_;
  }
  if (mac) {
    set_has_mac();
    mac_ = mac;
  } else {
    clear_has_mac();
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client_login_content.mac)
}

// required int32 need_strategy = 3;
inline bool client_login_content::has_need_strategy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void client_login_content::set_has_need_strategy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void client_login_content::clear_has_need_strategy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void client_login_content::clear_need_strategy() {
  need_strategy_ = 0;
  clear_has_need_strategy();
}
inline ::google::protobuf::int32 client_login_content::need_strategy() const {
  // @@protoc_insertion_point(field_get:client_login_content.need_strategy)
  return need_strategy_;
}
inline void client_login_content::set_need_strategy(::google::protobuf::int32 value) {
  set_has_need_strategy();
  need_strategy_ = value;
  // @@protoc_insertion_point(field_set:client_login_content.need_strategy)
}

// optional string druggist_id = 4;
inline bool client_login_content::has_druggist_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void client_login_content::set_has_druggist_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void client_login_content::clear_has_druggist_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void client_login_content::clear_druggist_id() {
  if (druggist_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    druggist_id_->clear();
  }
  clear_has_druggist_id();
}
inline const ::std::string& client_login_content::druggist_id() const {
  // @@protoc_insertion_point(field_get:client_login_content.druggist_id)
  return *druggist_id_;
}
inline void client_login_content::set_druggist_id(const ::std::string& value) {
  set_has_druggist_id();
  if (druggist_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    druggist_id_ = new ::std::string;
  }
  druggist_id_->assign(value);
  // @@protoc_insertion_point(field_set:client_login_content.druggist_id)
}
inline void client_login_content::set_druggist_id(const char* value) {
  set_has_druggist_id();
  if (druggist_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    druggist_id_ = new ::std::string;
  }
  druggist_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:client_login_content.druggist_id)
}
inline void client_login_content::set_druggist_id(const char* value, size_t size) {
  set_has_druggist_id();
  if (druggist_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    druggist_id_ = new ::std::string;
  }
  druggist_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client_login_content.druggist_id)
}
inline ::std::string* client_login_content::mutable_druggist_id() {
  set_has_druggist_id();
  if (druggist_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    druggist_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client_login_content.druggist_id)
  return druggist_id_;
}
inline ::std::string* client_login_content::release_druggist_id() {
  clear_has_druggist_id();
  if (druggist_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = druggist_id_;
    druggist_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void client_login_content::set_allocated_druggist_id(::std::string* druggist_id) {
  if (druggist_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete druggist_id_;
  }
  if (druggist_id) {
    set_has_druggist_id();
    druggist_id_ = druggist_id;
  } else {
    clear_has_druggist_id();
    druggist_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client_login_content.druggist_id)
}

// -------------------------------------------------------------------

// mobile_login_content

// required int32 need_stratey = 1;
inline bool mobile_login_content::has_need_stratey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mobile_login_content::set_has_need_stratey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mobile_login_content::clear_has_need_stratey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mobile_login_content::clear_need_stratey() {
  need_stratey_ = 0;
  clear_has_need_stratey();
}
inline ::google::protobuf::int32 mobile_login_content::need_stratey() const {
  // @@protoc_insertion_point(field_get:mobile_login_content.need_stratey)
  return need_stratey_;
}
inline void mobile_login_content::set_need_stratey(::google::protobuf::int32 value) {
  set_has_need_stratey();
  need_stratey_ = value;
  // @@protoc_insertion_point(field_set:mobile_login_content.need_stratey)
}

// optional string phone_num = 2;
inline bool mobile_login_content::has_phone_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mobile_login_content::set_has_phone_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mobile_login_content::clear_has_phone_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mobile_login_content::clear_phone_num() {
  if (phone_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_num_->clear();
  }
  clear_has_phone_num();
}
inline const ::std::string& mobile_login_content::phone_num() const {
  // @@protoc_insertion_point(field_get:mobile_login_content.phone_num)
  return *phone_num_;
}
inline void mobile_login_content::set_phone_num(const ::std::string& value) {
  set_has_phone_num();
  if (phone_num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_num_ = new ::std::string;
  }
  phone_num_->assign(value);
  // @@protoc_insertion_point(field_set:mobile_login_content.phone_num)
}
inline void mobile_login_content::set_phone_num(const char* value) {
  set_has_phone_num();
  if (phone_num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_num_ = new ::std::string;
  }
  phone_num_->assign(value);
  // @@protoc_insertion_point(field_set_char:mobile_login_content.phone_num)
}
inline void mobile_login_content::set_phone_num(const char* value, size_t size) {
  set_has_phone_num();
  if (phone_num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_num_ = new ::std::string;
  }
  phone_num_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mobile_login_content.phone_num)
}
inline ::std::string* mobile_login_content::mutable_phone_num() {
  set_has_phone_num();
  if (phone_num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_num_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mobile_login_content.phone_num)
  return phone_num_;
}
inline ::std::string* mobile_login_content::release_phone_num() {
  clear_has_phone_num();
  if (phone_num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = phone_num_;
    phone_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void mobile_login_content::set_allocated_phone_num(::std::string* phone_num) {
  if (phone_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_num_;
  }
  if (phone_num) {
    set_has_phone_num();
    phone_num_ = phone_num;
  } else {
    clear_has_phone_num();
    phone_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mobile_login_content.phone_num)
}

// optional string device_id = 3;
inline bool mobile_login_content::has_device_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mobile_login_content::set_has_device_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mobile_login_content::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mobile_login_content::clear_device_id() {
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_->clear();
  }
  clear_has_device_id();
}
inline const ::std::string& mobile_login_content::device_id() const {
  // @@protoc_insertion_point(field_get:mobile_login_content.device_id)
  return *device_id_;
}
inline void mobile_login_content::set_device_id(const ::std::string& value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
  // @@protoc_insertion_point(field_set:mobile_login_content.device_id)
}
inline void mobile_login_content::set_device_id(const char* value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:mobile_login_content.device_id)
}
inline void mobile_login_content::set_device_id(const char* value, size_t size) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mobile_login_content.device_id)
}
inline ::std::string* mobile_login_content::mutable_device_id() {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mobile_login_content.device_id)
  return device_id_;
}
inline ::std::string* mobile_login_content::release_device_id() {
  clear_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = device_id_;
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void mobile_login_content::set_allocated_device_id(::std::string* device_id) {
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_id_;
  }
  if (device_id) {
    set_has_device_id();
    device_id_ = device_id;
  } else {
    clear_has_device_id();
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mobile_login_content.device_id)
}

// optional string specifiy_id = 4;
inline bool mobile_login_content::has_specifiy_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mobile_login_content::set_has_specifiy_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mobile_login_content::clear_has_specifiy_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mobile_login_content::clear_specifiy_id() {
  if (specifiy_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    specifiy_id_->clear();
  }
  clear_has_specifiy_id();
}
inline const ::std::string& mobile_login_content::specifiy_id() const {
  // @@protoc_insertion_point(field_get:mobile_login_content.specifiy_id)
  return *specifiy_id_;
}
inline void mobile_login_content::set_specifiy_id(const ::std::string& value) {
  set_has_specifiy_id();
  if (specifiy_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    specifiy_id_ = new ::std::string;
  }
  specifiy_id_->assign(value);
  // @@protoc_insertion_point(field_set:mobile_login_content.specifiy_id)
}
inline void mobile_login_content::set_specifiy_id(const char* value) {
  set_has_specifiy_id();
  if (specifiy_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    specifiy_id_ = new ::std::string;
  }
  specifiy_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:mobile_login_content.specifiy_id)
}
inline void mobile_login_content::set_specifiy_id(const char* value, size_t size) {
  set_has_specifiy_id();
  if (specifiy_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    specifiy_id_ = new ::std::string;
  }
  specifiy_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mobile_login_content.specifiy_id)
}
inline ::std::string* mobile_login_content::mutable_specifiy_id() {
  set_has_specifiy_id();
  if (specifiy_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    specifiy_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mobile_login_content.specifiy_id)
  return specifiy_id_;
}
inline ::std::string* mobile_login_content::release_specifiy_id() {
  clear_has_specifiy_id();
  if (specifiy_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = specifiy_id_;
    specifiy_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void mobile_login_content::set_allocated_specifiy_id(::std::string* specifiy_id) {
  if (specifiy_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete specifiy_id_;
  }
  if (specifiy_id) {
    set_has_specifiy_id();
    specifiy_id_ = specifiy_id;
  } else {
    clear_has_specifiy_id();
    specifiy_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mobile_login_content.specifiy_id)
}

// optional string json_value = 5;
inline bool mobile_login_content::has_json_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mobile_login_content::set_has_json_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mobile_login_content::clear_has_json_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mobile_login_content::clear_json_value() {
  if (json_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_value_->clear();
  }
  clear_has_json_value();
}
inline const ::std::string& mobile_login_content::json_value() const {
  // @@protoc_insertion_point(field_get:mobile_login_content.json_value)
  return *json_value_;
}
inline void mobile_login_content::set_json_value(const ::std::string& value) {
  set_has_json_value();
  if (json_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_value_ = new ::std::string;
  }
  json_value_->assign(value);
  // @@protoc_insertion_point(field_set:mobile_login_content.json_value)
}
inline void mobile_login_content::set_json_value(const char* value) {
  set_has_json_value();
  if (json_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_value_ = new ::std::string;
  }
  json_value_->assign(value);
  // @@protoc_insertion_point(field_set_char:mobile_login_content.json_value)
}
inline void mobile_login_content::set_json_value(const char* value, size_t size) {
  set_has_json_value();
  if (json_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_value_ = new ::std::string;
  }
  json_value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mobile_login_content.json_value)
}
inline ::std::string* mobile_login_content::mutable_json_value() {
  set_has_json_value();
  if (json_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mobile_login_content.json_value)
  return json_value_;
}
inline ::std::string* mobile_login_content::release_json_value() {
  clear_has_json_value();
  if (json_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = json_value_;
    json_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void mobile_login_content::set_allocated_json_value(::std::string* json_value) {
  if (json_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_value_;
  }
  if (json_value) {
    set_has_json_value();
    json_value_ = json_value;
  } else {
    clear_has_json_value();
    json_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mobile_login_content.json_value)
}

// -------------------------------------------------------------------

// druggist_login_content

// required string name = 1;
inline bool druggist_login_content::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void druggist_login_content::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void druggist_login_content::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void druggist_login_content::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& druggist_login_content::name() const {
  // @@protoc_insertion_point(field_get:druggist_login_content.name)
  return *name_;
}
inline void druggist_login_content::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:druggist_login_content.name)
}
inline void druggist_login_content::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:druggist_login_content.name)
}
inline void druggist_login_content::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:druggist_login_content.name)
}
inline ::std::string* druggist_login_content::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:druggist_login_content.name)
  return name_;
}
inline ::std::string* druggist_login_content::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void druggist_login_content::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:druggist_login_content.name)
}

// optional string company_name = 2;
inline bool druggist_login_content::has_company_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void druggist_login_content::set_has_company_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void druggist_login_content::clear_has_company_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void druggist_login_content::clear_company_name() {
  if (company_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_name_->clear();
  }
  clear_has_company_name();
}
inline const ::std::string& druggist_login_content::company_name() const {
  // @@protoc_insertion_point(field_get:druggist_login_content.company_name)
  return *company_name_;
}
inline void druggist_login_content::set_company_name(const ::std::string& value) {
  set_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_name_ = new ::std::string;
  }
  company_name_->assign(value);
  // @@protoc_insertion_point(field_set:druggist_login_content.company_name)
}
inline void druggist_login_content::set_company_name(const char* value) {
  set_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_name_ = new ::std::string;
  }
  company_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:druggist_login_content.company_name)
}
inline void druggist_login_content::set_company_name(const char* value, size_t size) {
  set_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_name_ = new ::std::string;
  }
  company_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:druggist_login_content.company_name)
}
inline ::std::string* druggist_login_content::mutable_company_name() {
  set_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:druggist_login_content.company_name)
  return company_name_;
}
inline ::std::string* druggist_login_content::release_company_name() {
  clear_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = company_name_;
    company_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void druggist_login_content::set_allocated_company_name(::std::string* company_name) {
  if (company_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete company_name_;
  }
  if (company_name) {
    set_has_company_name();
    company_name_ = company_name;
  } else {
    clear_has_company_name();
    company_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:druggist_login_content.company_name)
}

// required int32 druggist_type = 3;
inline bool druggist_login_content::has_druggist_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void druggist_login_content::set_has_druggist_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void druggist_login_content::clear_has_druggist_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void druggist_login_content::clear_druggist_type() {
  druggist_type_ = 0;
  clear_has_druggist_type();
}
inline ::google::protobuf::int32 druggist_login_content::druggist_type() const {
  // @@protoc_insertion_point(field_get:druggist_login_content.druggist_type)
  return druggist_type_;
}
inline void druggist_login_content::set_druggist_type(::google::protobuf::int32 value) {
  set_has_druggist_type();
  druggist_type_ = value;
  // @@protoc_insertion_point(field_set:druggist_login_content.druggist_type)
}

// required string druggist_id = 4;
inline bool druggist_login_content::has_druggist_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void druggist_login_content::set_has_druggist_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void druggist_login_content::clear_has_druggist_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void druggist_login_content::clear_druggist_id() {
  if (druggist_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    druggist_id_->clear();
  }
  clear_has_druggist_id();
}
inline const ::std::string& druggist_login_content::druggist_id() const {
  // @@protoc_insertion_point(field_get:druggist_login_content.druggist_id)
  return *druggist_id_;
}
inline void druggist_login_content::set_druggist_id(const ::std::string& value) {
  set_has_druggist_id();
  if (druggist_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    druggist_id_ = new ::std::string;
  }
  druggist_id_->assign(value);
  // @@protoc_insertion_point(field_set:druggist_login_content.druggist_id)
}
inline void druggist_login_content::set_druggist_id(const char* value) {
  set_has_druggist_id();
  if (druggist_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    druggist_id_ = new ::std::string;
  }
  druggist_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:druggist_login_content.druggist_id)
}
inline void druggist_login_content::set_druggist_id(const char* value, size_t size) {
  set_has_druggist_id();
  if (druggist_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    druggist_id_ = new ::std::string;
  }
  druggist_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:druggist_login_content.druggist_id)
}
inline ::std::string* druggist_login_content::mutable_druggist_id() {
  set_has_druggist_id();
  if (druggist_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    druggist_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:druggist_login_content.druggist_id)
  return druggist_id_;
}
inline ::std::string* druggist_login_content::release_druggist_id() {
  clear_has_druggist_id();
  if (druggist_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = druggist_id_;
    druggist_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void druggist_login_content::set_allocated_druggist_id(::std::string* druggist_id) {
  if (druggist_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete druggist_id_;
  }
  if (druggist_id) {
    set_has_druggist_id();
    druggist_id_ = druggist_id;
  } else {
    clear_has_druggist_id();
    druggist_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:druggist_login_content.druggist_id)
}

// -------------------------------------------------------------------

// doctor_login_content

// required string name = 1;
inline bool doctor_login_content::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void doctor_login_content::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void doctor_login_content::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void doctor_login_content::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& doctor_login_content::name() const {
  // @@protoc_insertion_point(field_get:doctor_login_content.name)
  return *name_;
}
inline void doctor_login_content::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:doctor_login_content.name)
}
inline void doctor_login_content::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:doctor_login_content.name)
}
inline void doctor_login_content::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:doctor_login_content.name)
}
inline ::std::string* doctor_login_content::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:doctor_login_content.name)
  return name_;
}
inline ::std::string* doctor_login_content::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void doctor_login_content::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:doctor_login_content.name)
}

// optional string company_name = 2;
inline bool doctor_login_content::has_company_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void doctor_login_content::set_has_company_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void doctor_login_content::clear_has_company_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void doctor_login_content::clear_company_name() {
  if (company_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_name_->clear();
  }
  clear_has_company_name();
}
inline const ::std::string& doctor_login_content::company_name() const {
  // @@protoc_insertion_point(field_get:doctor_login_content.company_name)
  return *company_name_;
}
inline void doctor_login_content::set_company_name(const ::std::string& value) {
  set_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_name_ = new ::std::string;
  }
  company_name_->assign(value);
  // @@protoc_insertion_point(field_set:doctor_login_content.company_name)
}
inline void doctor_login_content::set_company_name(const char* value) {
  set_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_name_ = new ::std::string;
  }
  company_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:doctor_login_content.company_name)
}
inline void doctor_login_content::set_company_name(const char* value, size_t size) {
  set_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_name_ = new ::std::string;
  }
  company_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:doctor_login_content.company_name)
}
inline ::std::string* doctor_login_content::mutable_company_name() {
  set_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:doctor_login_content.company_name)
  return company_name_;
}
inline ::std::string* doctor_login_content::release_company_name() {
  clear_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = company_name_;
    company_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void doctor_login_content::set_allocated_company_name(::std::string* company_name) {
  if (company_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete company_name_;
  }
  if (company_name) {
    set_has_company_name();
    company_name_ = company_name;
  } else {
    clear_has_company_name();
    company_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:doctor_login_content.company_name)
}

// required int32 doctor_type = 3;
inline bool doctor_login_content::has_doctor_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void doctor_login_content::set_has_doctor_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void doctor_login_content::clear_has_doctor_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void doctor_login_content::clear_doctor_type() {
  doctor_type_ = 0;
  clear_has_doctor_type();
}
inline ::google::protobuf::int32 doctor_login_content::doctor_type() const {
  // @@protoc_insertion_point(field_get:doctor_login_content.doctor_type)
  return doctor_type_;
}
inline void doctor_login_content::set_doctor_type(::google::protobuf::int32 value) {
  set_has_doctor_type();
  doctor_type_ = value;
  // @@protoc_insertion_point(field_set:doctor_login_content.doctor_type)
}

// required string id = 4;
inline bool doctor_login_content::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void doctor_login_content::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void doctor_login_content::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void doctor_login_content::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& doctor_login_content::id() const {
  // @@protoc_insertion_point(field_get:doctor_login_content.id)
  return *id_;
}
inline void doctor_login_content::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:doctor_login_content.id)
}
inline void doctor_login_content::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:doctor_login_content.id)
}
inline void doctor_login_content::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:doctor_login_content.id)
}
inline ::std::string* doctor_login_content::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:doctor_login_content.id)
  return id_;
}
inline ::std::string* doctor_login_content::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void doctor_login_content::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:doctor_login_content.id)
}

// optional string json_value = 5;
inline bool doctor_login_content::has_json_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void doctor_login_content::set_has_json_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void doctor_login_content::clear_has_json_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void doctor_login_content::clear_json_value() {
  if (json_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_value_->clear();
  }
  clear_has_json_value();
}
inline const ::std::string& doctor_login_content::json_value() const {
  // @@protoc_insertion_point(field_get:doctor_login_content.json_value)
  return *json_value_;
}
inline void doctor_login_content::set_json_value(const ::std::string& value) {
  set_has_json_value();
  if (json_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_value_ = new ::std::string;
  }
  json_value_->assign(value);
  // @@protoc_insertion_point(field_set:doctor_login_content.json_value)
}
inline void doctor_login_content::set_json_value(const char* value) {
  set_has_json_value();
  if (json_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_value_ = new ::std::string;
  }
  json_value_->assign(value);
  // @@protoc_insertion_point(field_set_char:doctor_login_content.json_value)
}
inline void doctor_login_content::set_json_value(const char* value, size_t size) {
  set_has_json_value();
  if (json_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_value_ = new ::std::string;
  }
  json_value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:doctor_login_content.json_value)
}
inline ::std::string* doctor_login_content::mutable_json_value() {
  set_has_json_value();
  if (json_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:doctor_login_content.json_value)
  return json_value_;
}
inline ::std::string* doctor_login_content::release_json_value() {
  clear_has_json_value();
  if (json_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = json_value_;
    json_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void doctor_login_content::set_allocated_json_value(::std::string* json_value) {
  if (json_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_value_;
  }
  if (json_value) {
    set_has_json_value();
    json_value_ = json_value;
  } else {
    clear_has_json_value();
    json_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:doctor_login_content.json_value)
}

// -------------------------------------------------------------------

// login_response_content

// required int32 rt_value = 1;
inline bool login_response_content::has_rt_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void login_response_content::set_has_rt_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void login_response_content::clear_has_rt_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void login_response_content::clear_rt_value() {
  rt_value_ = 0;
  clear_has_rt_value();
}
inline ::google::protobuf::int32 login_response_content::rt_value() const {
  // @@protoc_insertion_point(field_get:login_response_content.rt_value)
  return rt_value_;
}
inline void login_response_content::set_rt_value(::google::protobuf::int32 value) {
  set_has_rt_value();
  rt_value_ = value;
  // @@protoc_insertion_point(field_set:login_response_content.rt_value)
}

// -------------------------------------------------------------------

// match_wait_content

// required int32 wait_count = 1;
inline bool match_wait_content::has_wait_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void match_wait_content::set_has_wait_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void match_wait_content::clear_has_wait_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void match_wait_content::clear_wait_count() {
  wait_count_ = 0;
  clear_has_wait_count();
}
inline ::google::protobuf::int32 match_wait_content::wait_count() const {
  // @@protoc_insertion_point(field_get:match_wait_content.wait_count)
  return wait_count_;
}
inline void match_wait_content::set_wait_count(::google::protobuf::int32 value) {
  set_has_wait_count();
  wait_count_ = value;
  // @@protoc_insertion_point(field_set:match_wait_content.wait_count)
}

// -------------------------------------------------------------------

// match_success_content

// required int32 business_id = 1;
inline bool match_success_content::has_business_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void match_success_content::set_has_business_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void match_success_content::clear_has_business_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void match_success_content::clear_business_id() {
  business_id_ = 0;
  clear_has_business_id();
}
inline ::google::protobuf::int32 match_success_content::business_id() const {
  // @@protoc_insertion_point(field_get:match_success_content.business_id)
  return business_id_;
}
inline void match_success_content::set_business_id(::google::protobuf::int32 value) {
  set_has_business_id();
  business_id_ = value;
  // @@protoc_insertion_point(field_set:match_success_content.business_id)
}

// required string proxy_server_ip = 2;
inline bool match_success_content::has_proxy_server_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void match_success_content::set_has_proxy_server_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void match_success_content::clear_has_proxy_server_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void match_success_content::clear_proxy_server_ip() {
  if (proxy_server_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxy_server_ip_->clear();
  }
  clear_has_proxy_server_ip();
}
inline const ::std::string& match_success_content::proxy_server_ip() const {
  // @@protoc_insertion_point(field_get:match_success_content.proxy_server_ip)
  return *proxy_server_ip_;
}
inline void match_success_content::set_proxy_server_ip(const ::std::string& value) {
  set_has_proxy_server_ip();
  if (proxy_server_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxy_server_ip_ = new ::std::string;
  }
  proxy_server_ip_->assign(value);
  // @@protoc_insertion_point(field_set:match_success_content.proxy_server_ip)
}
inline void match_success_content::set_proxy_server_ip(const char* value) {
  set_has_proxy_server_ip();
  if (proxy_server_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxy_server_ip_ = new ::std::string;
  }
  proxy_server_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:match_success_content.proxy_server_ip)
}
inline void match_success_content::set_proxy_server_ip(const char* value, size_t size) {
  set_has_proxy_server_ip();
  if (proxy_server_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxy_server_ip_ = new ::std::string;
  }
  proxy_server_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:match_success_content.proxy_server_ip)
}
inline ::std::string* match_success_content::mutable_proxy_server_ip() {
  set_has_proxy_server_ip();
  if (proxy_server_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxy_server_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:match_success_content.proxy_server_ip)
  return proxy_server_ip_;
}
inline ::std::string* match_success_content::release_proxy_server_ip() {
  clear_has_proxy_server_ip();
  if (proxy_server_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = proxy_server_ip_;
    proxy_server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void match_success_content::set_allocated_proxy_server_ip(::std::string* proxy_server_ip) {
  if (proxy_server_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxy_server_ip_;
  }
  if (proxy_server_ip) {
    set_has_proxy_server_ip();
    proxy_server_ip_ = proxy_server_ip;
  } else {
    clear_has_proxy_server_ip();
    proxy_server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:match_success_content.proxy_server_ip)
}

// required int32 proxy_server_port = 3;
inline bool match_success_content::has_proxy_server_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void match_success_content::set_has_proxy_server_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void match_success_content::clear_has_proxy_server_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void match_success_content::clear_proxy_server_port() {
  proxy_server_port_ = 0;
  clear_has_proxy_server_port();
}
inline ::google::protobuf::int32 match_success_content::proxy_server_port() const {
  // @@protoc_insertion_point(field_get:match_success_content.proxy_server_port)
  return proxy_server_port_;
}
inline void match_success_content::set_proxy_server_port(::google::protobuf::int32 value) {
  set_has_proxy_server_port();
  proxy_server_port_ = value;
  // @@protoc_insertion_point(field_set:match_success_content.proxy_server_port)
}

// optional string json_value = 4;
inline bool match_success_content::has_json_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void match_success_content::set_has_json_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void match_success_content::clear_has_json_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void match_success_content::clear_json_value() {
  if (json_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_value_->clear();
  }
  clear_has_json_value();
}
inline const ::std::string& match_success_content::json_value() const {
  // @@protoc_insertion_point(field_get:match_success_content.json_value)
  return *json_value_;
}
inline void match_success_content::set_json_value(const ::std::string& value) {
  set_has_json_value();
  if (json_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_value_ = new ::std::string;
  }
  json_value_->assign(value);
  // @@protoc_insertion_point(field_set:match_success_content.json_value)
}
inline void match_success_content::set_json_value(const char* value) {
  set_has_json_value();
  if (json_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_value_ = new ::std::string;
  }
  json_value_->assign(value);
  // @@protoc_insertion_point(field_set_char:match_success_content.json_value)
}
inline void match_success_content::set_json_value(const char* value, size_t size) {
  set_has_json_value();
  if (json_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_value_ = new ::std::string;
  }
  json_value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:match_success_content.json_value)
}
inline ::std::string* match_success_content::mutable_json_value() {
  set_has_json_value();
  if (json_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:match_success_content.json_value)
  return json_value_;
}
inline ::std::string* match_success_content::release_json_value() {
  clear_has_json_value();
  if (json_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = json_value_;
    json_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void match_success_content::set_allocated_json_value(::std::string* json_value) {
  if (json_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_value_;
  }
  if (json_value) {
    set_has_json_value();
    json_value_ = json_value;
  } else {
    clear_has_json_value();
    json_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:match_success_content.json_value)
}

// optional string druggist_account = 5;
inline bool match_success_content::has_druggist_account() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void match_success_content::set_has_druggist_account() {
  _has_bits_[0] |= 0x00000010u;
}
inline void match_success_content::clear_has_druggist_account() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void match_success_content::clear_druggist_account() {
  if (druggist_account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    druggist_account_->clear();
  }
  clear_has_druggist_account();
}
inline const ::std::string& match_success_content::druggist_account() const {
  // @@protoc_insertion_point(field_get:match_success_content.druggist_account)
  return *druggist_account_;
}
inline void match_success_content::set_druggist_account(const ::std::string& value) {
  set_has_druggist_account();
  if (druggist_account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    druggist_account_ = new ::std::string;
  }
  druggist_account_->assign(value);
  // @@protoc_insertion_point(field_set:match_success_content.druggist_account)
}
inline void match_success_content::set_druggist_account(const char* value) {
  set_has_druggist_account();
  if (druggist_account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    druggist_account_ = new ::std::string;
  }
  druggist_account_->assign(value);
  // @@protoc_insertion_point(field_set_char:match_success_content.druggist_account)
}
inline void match_success_content::set_druggist_account(const char* value, size_t size) {
  set_has_druggist_account();
  if (druggist_account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    druggist_account_ = new ::std::string;
  }
  druggist_account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:match_success_content.druggist_account)
}
inline ::std::string* match_success_content::mutable_druggist_account() {
  set_has_druggist_account();
  if (druggist_account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    druggist_account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:match_success_content.druggist_account)
  return druggist_account_;
}
inline ::std::string* match_success_content::release_druggist_account() {
  clear_has_druggist_account();
  if (druggist_account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = druggist_account_;
    druggist_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void match_success_content::set_allocated_druggist_account(::std::string* druggist_account) {
  if (druggist_account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete druggist_account_;
  }
  if (druggist_account) {
    set_has_druggist_account();
    druggist_account_ = druggist_account;
  } else {
    clear_has_druggist_account();
    druggist_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:match_success_content.druggist_account)
}

// -------------------------------------------------------------------

// match_failure_content

// required int32 match_error = 1;
inline bool match_failure_content::has_match_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void match_failure_content::set_has_match_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void match_failure_content::clear_has_match_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void match_failure_content::clear_match_error() {
  match_error_ = 0;
  clear_has_match_error();
}
inline ::google::protobuf::int32 match_failure_content::match_error() const {
  // @@protoc_insertion_point(field_get:match_failure_content.match_error)
  return match_error_;
}
inline void match_failure_content::set_match_error(::google::protobuf::int32 value) {
  set_has_match_error();
  match_error_ = value;
  // @@protoc_insertion_point(field_set:match_failure_content.match_error)
}

// -------------------------------------------------------------------

// business_content

// required int32 business_id = 1;
inline bool business_content::has_business_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void business_content::set_has_business_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void business_content::clear_has_business_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void business_content::clear_business_id() {
  business_id_ = 0;
  clear_has_business_id();
}
inline ::google::protobuf::int32 business_content::business_id() const {
  // @@protoc_insertion_point(field_get:business_content.business_id)
  return business_id_;
}
inline void business_content::set_business_id(::google::protobuf::int32 value) {
  set_has_business_id();
  business_id_ = value;
  // @@protoc_insertion_point(field_set:business_content.business_id)
}

// optional string json_value = 2;
inline bool business_content::has_json_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void business_content::set_has_json_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void business_content::clear_has_json_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void business_content::clear_json_value() {
  if (json_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_value_->clear();
  }
  clear_has_json_value();
}
inline const ::std::string& business_content::json_value() const {
  // @@protoc_insertion_point(field_get:business_content.json_value)
  return *json_value_;
}
inline void business_content::set_json_value(const ::std::string& value) {
  set_has_json_value();
  if (json_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_value_ = new ::std::string;
  }
  json_value_->assign(value);
  // @@protoc_insertion_point(field_set:business_content.json_value)
}
inline void business_content::set_json_value(const char* value) {
  set_has_json_value();
  if (json_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_value_ = new ::std::string;
  }
  json_value_->assign(value);
  // @@protoc_insertion_point(field_set_char:business_content.json_value)
}
inline void business_content::set_json_value(const char* value, size_t size) {
  set_has_json_value();
  if (json_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_value_ = new ::std::string;
  }
  json_value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:business_content.json_value)
}
inline ::std::string* business_content::mutable_json_value() {
  set_has_json_value();
  if (json_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:business_content.json_value)
  return json_value_;
}
inline ::std::string* business_content::release_json_value() {
  clear_has_json_value();
  if (json_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = json_value_;
    json_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void business_content::set_allocated_json_value(::std::string* json_value) {
  if (json_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_value_;
  }
  if (json_value) {
    set_has_json_value();
    json_value_ = json_value;
  } else {
    clear_has_json_value();
    json_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:business_content.json_value)
}

// optional int32 int_value = 3;
inline bool business_content::has_int_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void business_content::set_has_int_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void business_content::clear_has_int_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void business_content::clear_int_value() {
  int_value_ = 0;
  clear_has_int_value();
}
inline ::google::protobuf::int32 business_content::int_value() const {
  // @@protoc_insertion_point(field_get:business_content.int_value)
  return int_value_;
}
inline void business_content::set_int_value(::google::protobuf::int32 value) {
  set_has_int_value();
  int_value_ = value;
  // @@protoc_insertion_point(field_set:business_content.int_value)
}

// optional string string_value = 4;
inline bool business_content::has_string_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void business_content::set_has_string_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void business_content::clear_has_string_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void business_content::clear_string_value() {
  if (string_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    string_value_->clear();
  }
  clear_has_string_value();
}
inline const ::std::string& business_content::string_value() const {
  // @@protoc_insertion_point(field_get:business_content.string_value)
  return *string_value_;
}
inline void business_content::set_string_value(const ::std::string& value) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(value);
  // @@protoc_insertion_point(field_set:business_content.string_value)
}
inline void business_content::set_string_value(const char* value) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(value);
  // @@protoc_insertion_point(field_set_char:business_content.string_value)
}
inline void business_content::set_string_value(const char* value, size_t size) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:business_content.string_value)
}
inline ::std::string* business_content::mutable_string_value() {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    string_value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:business_content.string_value)
  return string_value_;
}
inline ::std::string* business_content::release_string_value() {
  clear_has_string_value();
  if (string_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = string_value_;
    string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void business_content::set_allocated_string_value(::std::string* string_value) {
  if (string_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete string_value_;
  }
  if (string_value) {
    set_has_string_value();
    string_value_ = string_value;
  } else {
    clear_has_string_value();
    string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:business_content.string_value)
}

// -------------------------------------------------------------------

// monitor_info_content

// repeated string infos = 1;
inline int monitor_info_content::infos_size() const {
  return infos_.size();
}
inline void monitor_info_content::clear_infos() {
  infos_.Clear();
}
inline const ::std::string& monitor_info_content::infos(int index) const {
  // @@protoc_insertion_point(field_get:monitor_info_content.infos)
  return infos_.Get(index);
}
inline ::std::string* monitor_info_content::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:monitor_info_content.infos)
  return infos_.Mutable(index);
}
inline void monitor_info_content::set_infos(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:monitor_info_content.infos)
  infos_.Mutable(index)->assign(value);
}
inline void monitor_info_content::set_infos(int index, const char* value) {
  infos_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:monitor_info_content.infos)
}
inline void monitor_info_content::set_infos(int index, const char* value, size_t size) {
  infos_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:monitor_info_content.infos)
}
inline ::std::string* monitor_info_content::add_infos() {
  return infos_.Add();
}
inline void monitor_info_content::add_infos(const ::std::string& value) {
  infos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:monitor_info_content.infos)
}
inline void monitor_info_content::add_infos(const char* value) {
  infos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:monitor_info_content.infos)
}
inline void monitor_info_content::add_infos(const char* value, size_t size) {
  infos_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:monitor_info_content.infos)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
monitor_info_content::infos() const {
  // @@protoc_insertion_point(field_list:monitor_info_content.infos)
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
monitor_info_content::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:monitor_info_content.infos)
  return &infos_;
}

// -------------------------------------------------------------------

// proxy_heartbeat_content

// required int32 thread_count = 1;
inline bool proxy_heartbeat_content::has_thread_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proxy_heartbeat_content::set_has_thread_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proxy_heartbeat_content::clear_has_thread_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proxy_heartbeat_content::clear_thread_count() {
  thread_count_ = 0;
  clear_has_thread_count();
}
inline ::google::protobuf::int32 proxy_heartbeat_content::thread_count() const {
  // @@protoc_insertion_point(field_get:proxy_heartbeat_content.thread_count)
  return thread_count_;
}
inline void proxy_heartbeat_content::set_thread_count(::google::protobuf::int32 value) {
  set_has_thread_count();
  thread_count_ = value;
  // @@protoc_insertion_point(field_set:proxy_heartbeat_content.thread_count)
}

// repeated int32 udp_port = 2;
inline int proxy_heartbeat_content::udp_port_size() const {
  return udp_port_.size();
}
inline void proxy_heartbeat_content::clear_udp_port() {
  udp_port_.Clear();
}
inline ::google::protobuf::int32 proxy_heartbeat_content::udp_port(int index) const {
  // @@protoc_insertion_point(field_get:proxy_heartbeat_content.udp_port)
  return udp_port_.Get(index);
}
inline void proxy_heartbeat_content::set_udp_port(int index, ::google::protobuf::int32 value) {
  udp_port_.Set(index, value);
  // @@protoc_insertion_point(field_set:proxy_heartbeat_content.udp_port)
}
inline void proxy_heartbeat_content::add_udp_port(::google::protobuf::int32 value) {
  udp_port_.Add(value);
  // @@protoc_insertion_point(field_add:proxy_heartbeat_content.udp_port)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
proxy_heartbeat_content::udp_port() const {
  // @@protoc_insertion_point(field_list:proxy_heartbeat_content.udp_port)
  return udp_port_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
proxy_heartbeat_content::mutable_udp_port() {
  // @@protoc_insertion_point(field_mutable_list:proxy_heartbeat_content.udp_port)
  return &udp_port_;
}

// repeated int32 business_count = 3;
inline int proxy_heartbeat_content::business_count_size() const {
  return business_count_.size();
}
inline void proxy_heartbeat_content::clear_business_count() {
  business_count_.Clear();
}
inline ::google::protobuf::int32 proxy_heartbeat_content::business_count(int index) const {
  // @@protoc_insertion_point(field_get:proxy_heartbeat_content.business_count)
  return business_count_.Get(index);
}
inline void proxy_heartbeat_content::set_business_count(int index, ::google::protobuf::int32 value) {
  business_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:proxy_heartbeat_content.business_count)
}
inline void proxy_heartbeat_content::add_business_count(::google::protobuf::int32 value) {
  business_count_.Add(value);
  // @@protoc_insertion_point(field_add:proxy_heartbeat_content.business_count)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
proxy_heartbeat_content::business_count() const {
  // @@protoc_insertion_point(field_list:proxy_heartbeat_content.business_count)
  return business_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
proxy_heartbeat_content::mutable_business_count() {
  // @@protoc_insertion_point(field_mutable_list:proxy_heartbeat_content.business_count)
  return &business_count_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_business_2eproto__INCLUDED

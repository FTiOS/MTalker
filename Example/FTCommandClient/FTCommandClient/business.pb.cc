// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: business.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "business.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* client_login_content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_login_content_reflection_ = NULL;
const ::google::protobuf::Descriptor* mobile_login_content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mobile_login_content_reflection_ = NULL;
const ::google::protobuf::Descriptor* druggist_login_content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  druggist_login_content_reflection_ = NULL;
const ::google::protobuf::Descriptor* doctor_login_content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  doctor_login_content_reflection_ = NULL;
const ::google::protobuf::Descriptor* login_response_content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  login_response_content_reflection_ = NULL;
const ::google::protobuf::Descriptor* match_wait_content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  match_wait_content_reflection_ = NULL;
const ::google::protobuf::Descriptor* match_success_content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  match_success_content_reflection_ = NULL;
const ::google::protobuf::Descriptor* match_failure_content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  match_failure_content_reflection_ = NULL;
const ::google::protobuf::Descriptor* business_content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  business_content_reflection_ = NULL;
const ::google::protobuf::Descriptor* monitor_info_content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  monitor_info_content_reflection_ = NULL;
const ::google::protobuf::Descriptor* proxy_heartbeat_content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proxy_heartbeat_content_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_business_2eproto() {
  protobuf_AddDesc_business_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "business.proto");
  GOOGLE_CHECK(file != NULL);
  client_login_content_descriptor_ = file->message_type(0);
  static const int client_login_content_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_login_content, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_login_content, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_login_content, need_strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_login_content, druggist_id_),
  };
  client_login_content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_login_content_descriptor_,
      client_login_content::default_instance_,
      client_login_content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_login_content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_login_content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_login_content));
  mobile_login_content_descriptor_ = file->message_type(1);
  static const int mobile_login_content_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mobile_login_content, need_stratey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mobile_login_content, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mobile_login_content, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mobile_login_content, specifiy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mobile_login_content, json_value_),
  };
  mobile_login_content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mobile_login_content_descriptor_,
      mobile_login_content::default_instance_,
      mobile_login_content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mobile_login_content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mobile_login_content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mobile_login_content));
  druggist_login_content_descriptor_ = file->message_type(2);
  static const int druggist_login_content_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(druggist_login_content, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(druggist_login_content, company_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(druggist_login_content, druggist_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(druggist_login_content, druggist_id_),
  };
  druggist_login_content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      druggist_login_content_descriptor_,
      druggist_login_content::default_instance_,
      druggist_login_content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(druggist_login_content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(druggist_login_content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(druggist_login_content));
  doctor_login_content_descriptor_ = file->message_type(3);
  static const int doctor_login_content_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doctor_login_content, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doctor_login_content, company_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doctor_login_content, doctor_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doctor_login_content, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doctor_login_content, json_value_),
  };
  doctor_login_content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      doctor_login_content_descriptor_,
      doctor_login_content::default_instance_,
      doctor_login_content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doctor_login_content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doctor_login_content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(doctor_login_content));
  login_response_content_descriptor_ = file->message_type(4);
  static const int login_response_content_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_response_content, rt_value_),
  };
  login_response_content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      login_response_content_descriptor_,
      login_response_content::default_instance_,
      login_response_content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_response_content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_response_content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(login_response_content));
  match_wait_content_descriptor_ = file->message_type(5);
  static const int match_wait_content_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(match_wait_content, wait_count_),
  };
  match_wait_content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      match_wait_content_descriptor_,
      match_wait_content::default_instance_,
      match_wait_content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(match_wait_content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(match_wait_content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(match_wait_content));
  match_success_content_descriptor_ = file->message_type(6);
  static const int match_success_content_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(match_success_content, business_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(match_success_content, proxy_server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(match_success_content, proxy_server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(match_success_content, json_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(match_success_content, druggist_account_),
  };
  match_success_content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      match_success_content_descriptor_,
      match_success_content::default_instance_,
      match_success_content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(match_success_content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(match_success_content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(match_success_content));
  match_failure_content_descriptor_ = file->message_type(7);
  static const int match_failure_content_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(match_failure_content, match_error_),
  };
  match_failure_content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      match_failure_content_descriptor_,
      match_failure_content::default_instance_,
      match_failure_content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(match_failure_content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(match_failure_content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(match_failure_content));
  business_content_descriptor_ = file->message_type(8);
  static const int business_content_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_content, business_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_content, json_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_content, int_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_content, string_value_),
  };
  business_content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      business_content_descriptor_,
      business_content::default_instance_,
      business_content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(business_content));
  monitor_info_content_descriptor_ = file->message_type(9);
  static const int monitor_info_content_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monitor_info_content, infos_),
  };
  monitor_info_content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      monitor_info_content_descriptor_,
      monitor_info_content::default_instance_,
      monitor_info_content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monitor_info_content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monitor_info_content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(monitor_info_content));
  proxy_heartbeat_content_descriptor_ = file->message_type(10);
  static const int proxy_heartbeat_content_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proxy_heartbeat_content, thread_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proxy_heartbeat_content, udp_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proxy_heartbeat_content, business_count_),
  };
  proxy_heartbeat_content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proxy_heartbeat_content_descriptor_,
      proxy_heartbeat_content::default_instance_,
      proxy_heartbeat_content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proxy_heartbeat_content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proxy_heartbeat_content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proxy_heartbeat_content));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_business_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_login_content_descriptor_, &client_login_content::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mobile_login_content_descriptor_, &mobile_login_content::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    druggist_login_content_descriptor_, &druggist_login_content::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    doctor_login_content_descriptor_, &doctor_login_content::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    login_response_content_descriptor_, &login_response_content::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    match_wait_content_descriptor_, &match_wait_content::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    match_success_content_descriptor_, &match_success_content::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    match_failure_content_descriptor_, &match_failure_content::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    business_content_descriptor_, &business_content::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    monitor_info_content_descriptor_, &monitor_info_content::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proxy_heartbeat_content_descriptor_, &proxy_heartbeat_content::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_business_2eproto() {
  delete client_login_content::default_instance_;
  delete client_login_content_reflection_;
  delete mobile_login_content::default_instance_;
  delete mobile_login_content_reflection_;
  delete druggist_login_content::default_instance_;
  delete druggist_login_content_reflection_;
  delete doctor_login_content::default_instance_;
  delete doctor_login_content_reflection_;
  delete login_response_content::default_instance_;
  delete login_response_content_reflection_;
  delete match_wait_content::default_instance_;
  delete match_wait_content_reflection_;
  delete match_success_content::default_instance_;
  delete match_success_content_reflection_;
  delete match_failure_content::default_instance_;
  delete match_failure_content_reflection_;
  delete business_content::default_instance_;
  delete business_content_reflection_;
  delete monitor_info_content::default_instance_;
  delete monitor_info_content_reflection_;
  delete proxy_heartbeat_content::default_instance_;
  delete proxy_heartbeat_content_reflection_;
}

void protobuf_AddDesc_business_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016business.proto\"]\n\024client_login_content"
    "\022\014\n\004name\030\001 \002(\t\022\013\n\003mac\030\002 \002(\t\022\025\n\rneed_stra"
    "tegy\030\003 \002(\005\022\023\n\013druggist_id\030\004 \001(\t\"{\n\024mobil"
    "e_login_content\022\024\n\014need_stratey\030\001 \002(\005\022\021\n"
    "\tphone_num\030\002 \001(\t\022\021\n\tdevice_id\030\003 \001(\t\022\023\n\013s"
    "pecifiy_id\030\004 \001(\t\022\022\n\njson_value\030\005 \001(\t\"h\n\026"
    "druggist_login_content\022\014\n\004name\030\001 \002(\t\022\024\n\014"
    "company_name\030\002 \001(\t\022\025\n\rdruggist_type\030\003 \002("
    "\005\022\023\n\013druggist_id\030\004 \002(\t\"o\n\024doctor_login_c"
    "ontent\022\014\n\004name\030\001 \002(\t\022\024\n\014company_name\030\002 \001"
    "(\t\022\023\n\013doctor_type\030\003 \002(\005\022\n\n\002id\030\004 \002(\t\022\022\n\nj"
    "son_value\030\005 \001(\t\"*\n\026login_response_conten"
    "t\022\020\n\010rt_value\030\001 \002(\005\"(\n\022match_wait_conten"
    "t\022\022\n\nwait_count\030\001 \002(\005\"\216\001\n\025match_success_"
    "content\022\023\n\013business_id\030\001 \002(\005\022\027\n\017proxy_se"
    "rver_ip\030\002 \002(\t\022\031\n\021proxy_server_port\030\003 \002(\005"
    "\022\022\n\njson_value\030\004 \001(\t\022\030\n\020druggist_account"
    "\030\005 \001(\t\",\n\025match_failure_content\022\023\n\013match"
    "_error\030\001 \002(\005\"d\n\020business_content\022\023\n\013busi"
    "ness_id\030\001 \002(\005\022\022\n\njson_value\030\002 \001(\t\022\021\n\tint"
    "_value\030\003 \001(\005\022\024\n\014string_value\030\004 \001(\t\"%\n\024mo"
    "nitor_info_content\022\r\n\005infos\030\001 \003(\t\"Y\n\027pro"
    "xy_heartbeat_content\022\024\n\014thread_count\030\001 \002"
    "(\005\022\020\n\010udp_port\030\002 \003(\005\022\026\n\016business_count\030\003"
    " \003(\005", 964);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "business.proto", &protobuf_RegisterTypes);
  client_login_content::default_instance_ = new client_login_content();
  mobile_login_content::default_instance_ = new mobile_login_content();
  druggist_login_content::default_instance_ = new druggist_login_content();
  doctor_login_content::default_instance_ = new doctor_login_content();
  login_response_content::default_instance_ = new login_response_content();
  match_wait_content::default_instance_ = new match_wait_content();
  match_success_content::default_instance_ = new match_success_content();
  match_failure_content::default_instance_ = new match_failure_content();
  business_content::default_instance_ = new business_content();
  monitor_info_content::default_instance_ = new monitor_info_content();
  proxy_heartbeat_content::default_instance_ = new proxy_heartbeat_content();
  client_login_content::default_instance_->InitAsDefaultInstance();
  mobile_login_content::default_instance_->InitAsDefaultInstance();
  druggist_login_content::default_instance_->InitAsDefaultInstance();
  doctor_login_content::default_instance_->InitAsDefaultInstance();
  login_response_content::default_instance_->InitAsDefaultInstance();
  match_wait_content::default_instance_->InitAsDefaultInstance();
  match_success_content::default_instance_->InitAsDefaultInstance();
  match_failure_content::default_instance_->InitAsDefaultInstance();
  business_content::default_instance_->InitAsDefaultInstance();
  monitor_info_content::default_instance_->InitAsDefaultInstance();
  proxy_heartbeat_content::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_business_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_business_2eproto {
  StaticDescriptorInitializer_business_2eproto() {
    protobuf_AddDesc_business_2eproto();
  }
} static_descriptor_initializer_business_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int client_login_content::kNameFieldNumber;
const int client_login_content::kMacFieldNumber;
const int client_login_content::kNeedStrategyFieldNumber;
const int client_login_content::kDruggistIdFieldNumber;
#endif  // !_MSC_VER

client_login_content::client_login_content()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_login_content)
}

void client_login_content::InitAsDefaultInstance() {
}

client_login_content::client_login_content(const client_login_content& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_login_content)
}

void client_login_content::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  need_strategy_ = 0;
  druggist_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_login_content::~client_login_content() {
  // @@protoc_insertion_point(destructor:client_login_content)
  SharedDtor();
}

void client_login_content::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_;
  }
  if (druggist_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete druggist_id_;
  }
  if (this != default_instance_) {
  }
}

void client_login_content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_login_content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_login_content_descriptor_;
}

const client_login_content& client_login_content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_business_2eproto();
  return *default_instance_;
}

client_login_content* client_login_content::default_instance_ = NULL;

client_login_content* client_login_content::New() const {
  return new client_login_content;
}

void client_login_content::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mac_->clear();
      }
    }
    need_strategy_ = 0;
    if (has_druggist_id()) {
      if (druggist_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        druggist_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_login_content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_login_content)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mac;
        break;
      }

      // required string mac = 2;
      case 2: {
        if (tag == 18) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mac");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_need_strategy;
        break;
      }

      // required int32 need_strategy = 3;
      case 3: {
        if (tag == 24) {
         parse_need_strategy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_strategy_)));
          set_has_need_strategy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_druggist_id;
        break;
      }

      // optional string druggist_id = 4;
      case 4: {
        if (tag == 34) {
         parse_druggist_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_druggist_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->druggist_id().data(), this->druggist_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "druggist_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_login_content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_login_content)
  return false;
#undef DO_
}

void client_login_content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_login_content)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string mac = 2;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mac(), output);
  }

  // required int32 need_strategy = 3;
  if (has_need_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->need_strategy(), output);
  }

  // optional string druggist_id = 4;
  if (has_druggist_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->druggist_id().data(), this->druggist_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "druggist_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->druggist_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_login_content)
}

::google::protobuf::uint8* client_login_content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_login_content)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string mac = 2;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mac(), target);
  }

  // required int32 need_strategy = 3;
  if (has_need_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->need_strategy(), target);
  }

  // optional string druggist_id = 4;
  if (has_druggist_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->druggist_id().data(), this->druggist_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "druggist_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->druggist_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_login_content)
  return target;
}

int client_login_content::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string mac = 2;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }

    // required int32 need_strategy = 3;
    if (has_need_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_strategy());
    }

    // optional string druggist_id = 4;
    if (has_druggist_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->druggist_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_login_content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_login_content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_login_content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_login_content::MergeFrom(const client_login_content& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
    if (from.has_need_strategy()) {
      set_need_strategy(from.need_strategy());
    }
    if (from.has_druggist_id()) {
      set_druggist_id(from.druggist_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_login_content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_login_content::CopyFrom(const client_login_content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_login_content::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void client_login_content::Swap(client_login_content* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(mac_, other->mac_);
    std::swap(need_strategy_, other->need_strategy_);
    std::swap(druggist_id_, other->druggist_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_login_content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_login_content_descriptor_;
  metadata.reflection = client_login_content_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mobile_login_content::kNeedStrateyFieldNumber;
const int mobile_login_content::kPhoneNumFieldNumber;
const int mobile_login_content::kDeviceIdFieldNumber;
const int mobile_login_content::kSpecifiyIdFieldNumber;
const int mobile_login_content::kJsonValueFieldNumber;
#endif  // !_MSC_VER

mobile_login_content::mobile_login_content()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mobile_login_content)
}

void mobile_login_content::InitAsDefaultInstance() {
}

mobile_login_content::mobile_login_content(const mobile_login_content& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mobile_login_content)
}

void mobile_login_content::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  need_stratey_ = 0;
  phone_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  specifiy_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mobile_login_content::~mobile_login_content() {
  // @@protoc_insertion_point(destructor:mobile_login_content)
  SharedDtor();
}

void mobile_login_content::SharedDtor() {
  if (phone_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_num_;
  }
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_id_;
  }
  if (specifiy_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete specifiy_id_;
  }
  if (json_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_value_;
  }
  if (this != default_instance_) {
  }
}

void mobile_login_content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mobile_login_content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mobile_login_content_descriptor_;
}

const mobile_login_content& mobile_login_content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_business_2eproto();
  return *default_instance_;
}

mobile_login_content* mobile_login_content::default_instance_ = NULL;

mobile_login_content* mobile_login_content::New() const {
  return new mobile_login_content;
}

void mobile_login_content::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    need_stratey_ = 0;
    if (has_phone_num()) {
      if (phone_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phone_num_->clear();
      }
    }
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_id_->clear();
      }
    }
    if (has_specifiy_id()) {
      if (specifiy_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        specifiy_id_->clear();
      }
    }
    if (has_json_value()) {
      if (json_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        json_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mobile_login_content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mobile_login_content)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 need_stratey = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_stratey_)));
          set_has_need_stratey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_phone_num;
        break;
      }

      // optional string phone_num = 2;
      case 2: {
        if (tag == 18) {
         parse_phone_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_num()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phone_num().data(), this->phone_num().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "phone_num");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_device_id;
        break;
      }

      // optional string device_id = 3;
      case 3: {
        if (tag == 26) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_specifiy_id;
        break;
      }

      // optional string specifiy_id = 4;
      case 4: {
        if (tag == 34) {
         parse_specifiy_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_specifiy_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->specifiy_id().data(), this->specifiy_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "specifiy_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_json_value;
        break;
      }

      // optional string json_value = 5;
      case 5: {
        if (tag == 42) {
         parse_json_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->json_value().data(), this->json_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "json_value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mobile_login_content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mobile_login_content)
  return false;
#undef DO_
}

void mobile_login_content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mobile_login_content)
  // required int32 need_stratey = 1;
  if (has_need_stratey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->need_stratey(), output);
  }

  // optional string phone_num = 2;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone_num().data(), this->phone_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phone_num");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->phone_num(), output);
  }

  // optional string device_id = 3;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->device_id(), output);
  }

  // optional string specifiy_id = 4;
  if (has_specifiy_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->specifiy_id().data(), this->specifiy_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "specifiy_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->specifiy_id(), output);
  }

  // optional string json_value = 5;
  if (has_json_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_value().data(), this->json_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "json_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->json_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mobile_login_content)
}

::google::protobuf::uint8* mobile_login_content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mobile_login_content)
  // required int32 need_stratey = 1;
  if (has_need_stratey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->need_stratey(), target);
  }

  // optional string phone_num = 2;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone_num().data(), this->phone_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phone_num");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phone_num(), target);
  }

  // optional string device_id = 3;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->device_id(), target);
  }

  // optional string specifiy_id = 4;
  if (has_specifiy_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->specifiy_id().data(), this->specifiy_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "specifiy_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->specifiy_id(), target);
  }

  // optional string json_value = 5;
  if (has_json_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_value().data(), this->json_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "json_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->json_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mobile_login_content)
  return target;
}

int mobile_login_content::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 need_stratey = 1;
    if (has_need_stratey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_stratey());
    }

    // optional string phone_num = 2;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone_num());
    }

    // optional string device_id = 3;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional string specifiy_id = 4;
    if (has_specifiy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->specifiy_id());
    }

    // optional string json_value = 5;
    if (has_json_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->json_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mobile_login_content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mobile_login_content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mobile_login_content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mobile_login_content::MergeFrom(const mobile_login_content& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_need_stratey()) {
      set_need_stratey(from.need_stratey());
    }
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_specifiy_id()) {
      set_specifiy_id(from.specifiy_id());
    }
    if (from.has_json_value()) {
      set_json_value(from.json_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mobile_login_content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mobile_login_content::CopyFrom(const mobile_login_content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mobile_login_content::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mobile_login_content::Swap(mobile_login_content* other) {
  if (other != this) {
    std::swap(need_stratey_, other->need_stratey_);
    std::swap(phone_num_, other->phone_num_);
    std::swap(device_id_, other->device_id_);
    std::swap(specifiy_id_, other->specifiy_id_);
    std::swap(json_value_, other->json_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mobile_login_content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mobile_login_content_descriptor_;
  metadata.reflection = mobile_login_content_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int druggist_login_content::kNameFieldNumber;
const int druggist_login_content::kCompanyNameFieldNumber;
const int druggist_login_content::kDruggistTypeFieldNumber;
const int druggist_login_content::kDruggistIdFieldNumber;
#endif  // !_MSC_VER

druggist_login_content::druggist_login_content()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:druggist_login_content)
}

void druggist_login_content::InitAsDefaultInstance() {
}

druggist_login_content::druggist_login_content(const druggist_login_content& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:druggist_login_content)
}

void druggist_login_content::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  druggist_type_ = 0;
  druggist_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

druggist_login_content::~druggist_login_content() {
  // @@protoc_insertion_point(destructor:druggist_login_content)
  SharedDtor();
}

void druggist_login_content::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (company_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete company_name_;
  }
  if (druggist_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete druggist_id_;
  }
  if (this != default_instance_) {
  }
}

void druggist_login_content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* druggist_login_content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return druggist_login_content_descriptor_;
}

const druggist_login_content& druggist_login_content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_business_2eproto();
  return *default_instance_;
}

druggist_login_content* druggist_login_content::default_instance_ = NULL;

druggist_login_content* druggist_login_content::New() const {
  return new druggist_login_content;
}

void druggist_login_content::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_company_name()) {
      if (company_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        company_name_->clear();
      }
    }
    druggist_type_ = 0;
    if (has_druggist_id()) {
      if (druggist_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        druggist_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool druggist_login_content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:druggist_login_content)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_company_name;
        break;
      }

      // optional string company_name = 2;
      case 2: {
        if (tag == 18) {
         parse_company_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->company_name().data(), this->company_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "company_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_druggist_type;
        break;
      }

      // required int32 druggist_type = 3;
      case 3: {
        if (tag == 24) {
         parse_druggist_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &druggist_type_)));
          set_has_druggist_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_druggist_id;
        break;
      }

      // required string druggist_id = 4;
      case 4: {
        if (tag == 34) {
         parse_druggist_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_druggist_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->druggist_id().data(), this->druggist_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "druggist_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:druggist_login_content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:druggist_login_content)
  return false;
#undef DO_
}

void druggist_login_content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:druggist_login_content)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string company_name = 2;
  if (has_company_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->company_name().data(), this->company_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "company_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->company_name(), output);
  }

  // required int32 druggist_type = 3;
  if (has_druggist_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->druggist_type(), output);
  }

  // required string druggist_id = 4;
  if (has_druggist_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->druggist_id().data(), this->druggist_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "druggist_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->druggist_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:druggist_login_content)
}

::google::protobuf::uint8* druggist_login_content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:druggist_login_content)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string company_name = 2;
  if (has_company_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->company_name().data(), this->company_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "company_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->company_name(), target);
  }

  // required int32 druggist_type = 3;
  if (has_druggist_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->druggist_type(), target);
  }

  // required string druggist_id = 4;
  if (has_druggist_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->druggist_id().data(), this->druggist_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "druggist_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->druggist_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:druggist_login_content)
  return target;
}

int druggist_login_content::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string company_name = 2;
    if (has_company_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->company_name());
    }

    // required int32 druggist_type = 3;
    if (has_druggist_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->druggist_type());
    }

    // required string druggist_id = 4;
    if (has_druggist_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->druggist_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void druggist_login_content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const druggist_login_content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const druggist_login_content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void druggist_login_content::MergeFrom(const druggist_login_content& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_company_name()) {
      set_company_name(from.company_name());
    }
    if (from.has_druggist_type()) {
      set_druggist_type(from.druggist_type());
    }
    if (from.has_druggist_id()) {
      set_druggist_id(from.druggist_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void druggist_login_content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void druggist_login_content::CopyFrom(const druggist_login_content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool druggist_login_content::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void druggist_login_content::Swap(druggist_login_content* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(company_name_, other->company_name_);
    std::swap(druggist_type_, other->druggist_type_);
    std::swap(druggist_id_, other->druggist_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata druggist_login_content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = druggist_login_content_descriptor_;
  metadata.reflection = druggist_login_content_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int doctor_login_content::kNameFieldNumber;
const int doctor_login_content::kCompanyNameFieldNumber;
const int doctor_login_content::kDoctorTypeFieldNumber;
const int doctor_login_content::kIdFieldNumber;
const int doctor_login_content::kJsonValueFieldNumber;
#endif  // !_MSC_VER

doctor_login_content::doctor_login_content()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:doctor_login_content)
}

void doctor_login_content::InitAsDefaultInstance() {
}

doctor_login_content::doctor_login_content(const doctor_login_content& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:doctor_login_content)
}

void doctor_login_content::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doctor_type_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

doctor_login_content::~doctor_login_content() {
  // @@protoc_insertion_point(destructor:doctor_login_content)
  SharedDtor();
}

void doctor_login_content::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (company_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete company_name_;
  }
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (json_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_value_;
  }
  if (this != default_instance_) {
  }
}

void doctor_login_content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* doctor_login_content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return doctor_login_content_descriptor_;
}

const doctor_login_content& doctor_login_content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_business_2eproto();
  return *default_instance_;
}

doctor_login_content* doctor_login_content::default_instance_ = NULL;

doctor_login_content* doctor_login_content::New() const {
  return new doctor_login_content;
}

void doctor_login_content::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_company_name()) {
      if (company_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        company_name_->clear();
      }
    }
    doctor_type_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_json_value()) {
      if (json_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        json_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool doctor_login_content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:doctor_login_content)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_company_name;
        break;
      }

      // optional string company_name = 2;
      case 2: {
        if (tag == 18) {
         parse_company_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->company_name().data(), this->company_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "company_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_doctor_type;
        break;
      }

      // required int32 doctor_type = 3;
      case 3: {
        if (tag == 24) {
         parse_doctor_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doctor_type_)));
          set_has_doctor_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_id;
        break;
      }

      // required string id = 4;
      case 4: {
        if (tag == 34) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_json_value;
        break;
      }

      // optional string json_value = 5;
      case 5: {
        if (tag == 42) {
         parse_json_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->json_value().data(), this->json_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "json_value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:doctor_login_content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:doctor_login_content)
  return false;
#undef DO_
}

void doctor_login_content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:doctor_login_content)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string company_name = 2;
  if (has_company_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->company_name().data(), this->company_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "company_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->company_name(), output);
  }

  // required int32 doctor_type = 3;
  if (has_doctor_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->doctor_type(), output);
  }

  // required string id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->id(), output);
  }

  // optional string json_value = 5;
  if (has_json_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_value().data(), this->json_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "json_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->json_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:doctor_login_content)
}

::google::protobuf::uint8* doctor_login_content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:doctor_login_content)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string company_name = 2;
  if (has_company_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->company_name().data(), this->company_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "company_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->company_name(), target);
  }

  // required int32 doctor_type = 3;
  if (has_doctor_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->doctor_type(), target);
  }

  // required string id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->id(), target);
  }

  // optional string json_value = 5;
  if (has_json_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_value().data(), this->json_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "json_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->json_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doctor_login_content)
  return target;
}

int doctor_login_content::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string company_name = 2;
    if (has_company_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->company_name());
    }

    // required int32 doctor_type = 3;
    if (has_doctor_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doctor_type());
    }

    // required string id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string json_value = 5;
    if (has_json_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->json_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void doctor_login_content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const doctor_login_content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const doctor_login_content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void doctor_login_content::MergeFrom(const doctor_login_content& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_company_name()) {
      set_company_name(from.company_name());
    }
    if (from.has_doctor_type()) {
      set_doctor_type(from.doctor_type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_json_value()) {
      set_json_value(from.json_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void doctor_login_content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void doctor_login_content::CopyFrom(const doctor_login_content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool doctor_login_content::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void doctor_login_content::Swap(doctor_login_content* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(company_name_, other->company_name_);
    std::swap(doctor_type_, other->doctor_type_);
    std::swap(id_, other->id_);
    std::swap(json_value_, other->json_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata doctor_login_content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = doctor_login_content_descriptor_;
  metadata.reflection = doctor_login_content_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int login_response_content::kRtValueFieldNumber;
#endif  // !_MSC_VER

login_response_content::login_response_content()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:login_response_content)
}

void login_response_content::InitAsDefaultInstance() {
}

login_response_content::login_response_content(const login_response_content& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:login_response_content)
}

void login_response_content::SharedCtor() {
  _cached_size_ = 0;
  rt_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

login_response_content::~login_response_content() {
  // @@protoc_insertion_point(destructor:login_response_content)
  SharedDtor();
}

void login_response_content::SharedDtor() {
  if (this != default_instance_) {
  }
}

void login_response_content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_response_content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_response_content_descriptor_;
}

const login_response_content& login_response_content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_business_2eproto();
  return *default_instance_;
}

login_response_content* login_response_content::default_instance_ = NULL;

login_response_content* login_response_content::New() const {
  return new login_response_content;
}

void login_response_content::Clear() {
  rt_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool login_response_content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:login_response_content)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rt_value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rt_value_)));
          set_has_rt_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:login_response_content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:login_response_content)
  return false;
#undef DO_
}

void login_response_content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:login_response_content)
  // required int32 rt_value = 1;
  if (has_rt_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rt_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:login_response_content)
}

::google::protobuf::uint8* login_response_content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:login_response_content)
  // required int32 rt_value = 1;
  if (has_rt_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rt_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login_response_content)
  return target;
}

int login_response_content::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rt_value = 1;
    if (has_rt_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rt_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_response_content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const login_response_content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const login_response_content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void login_response_content::MergeFrom(const login_response_content& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rt_value()) {
      set_rt_value(from.rt_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void login_response_content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_response_content::CopyFrom(const login_response_content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_response_content::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void login_response_content::Swap(login_response_content* other) {
  if (other != this) {
    std::swap(rt_value_, other->rt_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata login_response_content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = login_response_content_descriptor_;
  metadata.reflection = login_response_content_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int match_wait_content::kWaitCountFieldNumber;
#endif  // !_MSC_VER

match_wait_content::match_wait_content()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:match_wait_content)
}

void match_wait_content::InitAsDefaultInstance() {
}

match_wait_content::match_wait_content(const match_wait_content& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:match_wait_content)
}

void match_wait_content::SharedCtor() {
  _cached_size_ = 0;
  wait_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

match_wait_content::~match_wait_content() {
  // @@protoc_insertion_point(destructor:match_wait_content)
  SharedDtor();
}

void match_wait_content::SharedDtor() {
  if (this != default_instance_) {
  }
}

void match_wait_content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* match_wait_content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return match_wait_content_descriptor_;
}

const match_wait_content& match_wait_content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_business_2eproto();
  return *default_instance_;
}

match_wait_content* match_wait_content::default_instance_ = NULL;

match_wait_content* match_wait_content::New() const {
  return new match_wait_content;
}

void match_wait_content::Clear() {
  wait_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool match_wait_content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:match_wait_content)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 wait_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wait_count_)));
          set_has_wait_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:match_wait_content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:match_wait_content)
  return false;
#undef DO_
}

void match_wait_content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:match_wait_content)
  // required int32 wait_count = 1;
  if (has_wait_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wait_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:match_wait_content)
}

::google::protobuf::uint8* match_wait_content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:match_wait_content)
  // required int32 wait_count = 1;
  if (has_wait_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wait_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:match_wait_content)
  return target;
}

int match_wait_content::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 wait_count = 1;
    if (has_wait_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wait_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void match_wait_content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const match_wait_content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const match_wait_content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void match_wait_content::MergeFrom(const match_wait_content& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wait_count()) {
      set_wait_count(from.wait_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void match_wait_content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void match_wait_content::CopyFrom(const match_wait_content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool match_wait_content::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void match_wait_content::Swap(match_wait_content* other) {
  if (other != this) {
    std::swap(wait_count_, other->wait_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata match_wait_content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = match_wait_content_descriptor_;
  metadata.reflection = match_wait_content_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int match_success_content::kBusinessIdFieldNumber;
const int match_success_content::kProxyServerIpFieldNumber;
const int match_success_content::kProxyServerPortFieldNumber;
const int match_success_content::kJsonValueFieldNumber;
const int match_success_content::kDruggistAccountFieldNumber;
#endif  // !_MSC_VER

match_success_content::match_success_content()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:match_success_content)
}

void match_success_content::InitAsDefaultInstance() {
}

match_success_content::match_success_content(const match_success_content& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:match_success_content)
}

void match_success_content::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  business_id_ = 0;
  proxy_server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_server_port_ = 0;
  json_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  druggist_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

match_success_content::~match_success_content() {
  // @@protoc_insertion_point(destructor:match_success_content)
  SharedDtor();
}

void match_success_content::SharedDtor() {
  if (proxy_server_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxy_server_ip_;
  }
  if (json_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_value_;
  }
  if (druggist_account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete druggist_account_;
  }
  if (this != default_instance_) {
  }
}

void match_success_content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* match_success_content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return match_success_content_descriptor_;
}

const match_success_content& match_success_content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_business_2eproto();
  return *default_instance_;
}

match_success_content* match_success_content::default_instance_ = NULL;

match_success_content* match_success_content::New() const {
  return new match_success_content;
}

void match_success_content::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<match_success_content*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(business_id_, proxy_server_port_);
    if (has_proxy_server_ip()) {
      if (proxy_server_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        proxy_server_ip_->clear();
      }
    }
    if (has_json_value()) {
      if (json_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        json_value_->clear();
      }
    }
    if (has_druggist_account()) {
      if (druggist_account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        druggist_account_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool match_success_content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:match_success_content)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 business_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &business_id_)));
          set_has_business_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_proxy_server_ip;
        break;
      }

      // required string proxy_server_ip = 2;
      case 2: {
        if (tag == 18) {
         parse_proxy_server_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxy_server_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proxy_server_ip().data(), this->proxy_server_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proxy_server_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_proxy_server_port;
        break;
      }

      // required int32 proxy_server_port = 3;
      case 3: {
        if (tag == 24) {
         parse_proxy_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proxy_server_port_)));
          set_has_proxy_server_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_json_value;
        break;
      }

      // optional string json_value = 4;
      case 4: {
        if (tag == 34) {
         parse_json_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->json_value().data(), this->json_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "json_value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_druggist_account;
        break;
      }

      // optional string druggist_account = 5;
      case 5: {
        if (tag == 42) {
         parse_druggist_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_druggist_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->druggist_account().data(), this->druggist_account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "druggist_account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:match_success_content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:match_success_content)
  return false;
#undef DO_
}

void match_success_content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:match_success_content)
  // required int32 business_id = 1;
  if (has_business_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->business_id(), output);
  }

  // required string proxy_server_ip = 2;
  if (has_proxy_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxy_server_ip().data(), this->proxy_server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxy_server_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->proxy_server_ip(), output);
  }

  // required int32 proxy_server_port = 3;
  if (has_proxy_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->proxy_server_port(), output);
  }

  // optional string json_value = 4;
  if (has_json_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_value().data(), this->json_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "json_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->json_value(), output);
  }

  // optional string druggist_account = 5;
  if (has_druggist_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->druggist_account().data(), this->druggist_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "druggist_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->druggist_account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:match_success_content)
}

::google::protobuf::uint8* match_success_content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:match_success_content)
  // required int32 business_id = 1;
  if (has_business_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->business_id(), target);
  }

  // required string proxy_server_ip = 2;
  if (has_proxy_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxy_server_ip().data(), this->proxy_server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxy_server_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->proxy_server_ip(), target);
  }

  // required int32 proxy_server_port = 3;
  if (has_proxy_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->proxy_server_port(), target);
  }

  // optional string json_value = 4;
  if (has_json_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_value().data(), this->json_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "json_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->json_value(), target);
  }

  // optional string druggist_account = 5;
  if (has_druggist_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->druggist_account().data(), this->druggist_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "druggist_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->druggist_account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:match_success_content)
  return target;
}

int match_success_content::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 business_id = 1;
    if (has_business_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->business_id());
    }

    // required string proxy_server_ip = 2;
    if (has_proxy_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proxy_server_ip());
    }

    // required int32 proxy_server_port = 3;
    if (has_proxy_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proxy_server_port());
    }

    // optional string json_value = 4;
    if (has_json_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->json_value());
    }

    // optional string druggist_account = 5;
    if (has_druggist_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->druggist_account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void match_success_content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const match_success_content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const match_success_content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void match_success_content::MergeFrom(const match_success_content& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_business_id()) {
      set_business_id(from.business_id());
    }
    if (from.has_proxy_server_ip()) {
      set_proxy_server_ip(from.proxy_server_ip());
    }
    if (from.has_proxy_server_port()) {
      set_proxy_server_port(from.proxy_server_port());
    }
    if (from.has_json_value()) {
      set_json_value(from.json_value());
    }
    if (from.has_druggist_account()) {
      set_druggist_account(from.druggist_account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void match_success_content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void match_success_content::CopyFrom(const match_success_content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool match_success_content::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void match_success_content::Swap(match_success_content* other) {
  if (other != this) {
    std::swap(business_id_, other->business_id_);
    std::swap(proxy_server_ip_, other->proxy_server_ip_);
    std::swap(proxy_server_port_, other->proxy_server_port_);
    std::swap(json_value_, other->json_value_);
    std::swap(druggist_account_, other->druggist_account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata match_success_content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = match_success_content_descriptor_;
  metadata.reflection = match_success_content_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int match_failure_content::kMatchErrorFieldNumber;
#endif  // !_MSC_VER

match_failure_content::match_failure_content()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:match_failure_content)
}

void match_failure_content::InitAsDefaultInstance() {
}

match_failure_content::match_failure_content(const match_failure_content& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:match_failure_content)
}

void match_failure_content::SharedCtor() {
  _cached_size_ = 0;
  match_error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

match_failure_content::~match_failure_content() {
  // @@protoc_insertion_point(destructor:match_failure_content)
  SharedDtor();
}

void match_failure_content::SharedDtor() {
  if (this != default_instance_) {
  }
}

void match_failure_content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* match_failure_content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return match_failure_content_descriptor_;
}

const match_failure_content& match_failure_content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_business_2eproto();
  return *default_instance_;
}

match_failure_content* match_failure_content::default_instance_ = NULL;

match_failure_content* match_failure_content::New() const {
  return new match_failure_content;
}

void match_failure_content::Clear() {
  match_error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool match_failure_content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:match_failure_content)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 match_error = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_error_)));
          set_has_match_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:match_failure_content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:match_failure_content)
  return false;
#undef DO_
}

void match_failure_content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:match_failure_content)
  // required int32 match_error = 1;
  if (has_match_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->match_error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:match_failure_content)
}

::google::protobuf::uint8* match_failure_content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:match_failure_content)
  // required int32 match_error = 1;
  if (has_match_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->match_error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:match_failure_content)
  return target;
}

int match_failure_content::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 match_error = 1;
    if (has_match_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void match_failure_content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const match_failure_content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const match_failure_content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void match_failure_content::MergeFrom(const match_failure_content& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_error()) {
      set_match_error(from.match_error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void match_failure_content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void match_failure_content::CopyFrom(const match_failure_content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool match_failure_content::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void match_failure_content::Swap(match_failure_content* other) {
  if (other != this) {
    std::swap(match_error_, other->match_error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata match_failure_content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = match_failure_content_descriptor_;
  metadata.reflection = match_failure_content_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int business_content::kBusinessIdFieldNumber;
const int business_content::kJsonValueFieldNumber;
const int business_content::kIntValueFieldNumber;
const int business_content::kStringValueFieldNumber;
#endif  // !_MSC_VER

business_content::business_content()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:business_content)
}

void business_content::InitAsDefaultInstance() {
}

business_content::business_content(const business_content& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:business_content)
}

void business_content::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  business_id_ = 0;
  json_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  int_value_ = 0;
  string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

business_content::~business_content() {
  // @@protoc_insertion_point(destructor:business_content)
  SharedDtor();
}

void business_content::SharedDtor() {
  if (json_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_value_;
  }
  if (string_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete string_value_;
  }
  if (this != default_instance_) {
  }
}

void business_content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* business_content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return business_content_descriptor_;
}

const business_content& business_content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_business_2eproto();
  return *default_instance_;
}

business_content* business_content::default_instance_ = NULL;

business_content* business_content::New() const {
  return new business_content;
}

void business_content::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<business_content*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(business_id_, int_value_);
    if (has_json_value()) {
      if (json_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        json_value_->clear();
      }
    }
    if (has_string_value()) {
      if (string_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        string_value_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool business_content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:business_content)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 business_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &business_id_)));
          set_has_business_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_json_value;
        break;
      }

      // optional string json_value = 2;
      case 2: {
        if (tag == 18) {
         parse_json_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->json_value().data(), this->json_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "json_value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_int_value;
        break;
      }

      // optional int32 int_value = 3;
      case 3: {
        if (tag == 24) {
         parse_int_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_value_)));
          set_has_int_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_string_value;
        break;
      }

      // optional string string_value = 4;
      case 4: {
        if (tag == 34) {
         parse_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string_value().data(), this->string_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "string_value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:business_content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:business_content)
  return false;
#undef DO_
}

void business_content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:business_content)
  // required int32 business_id = 1;
  if (has_business_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->business_id(), output);
  }

  // optional string json_value = 2;
  if (has_json_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_value().data(), this->json_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "json_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->json_value(), output);
  }

  // optional int32 int_value = 3;
  if (has_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->int_value(), output);
  }

  // optional string string_value = 4;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "string_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->string_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:business_content)
}

::google::protobuf::uint8* business_content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:business_content)
  // required int32 business_id = 1;
  if (has_business_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->business_id(), target);
  }

  // optional string json_value = 2;
  if (has_json_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_value().data(), this->json_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "json_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->json_value(), target);
  }

  // optional int32 int_value = 3;
  if (has_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->int_value(), target);
  }

  // optional string string_value = 4;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "string_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->string_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:business_content)
  return target;
}

int business_content::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 business_id = 1;
    if (has_business_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->business_id());
    }

    // optional string json_value = 2;
    if (has_json_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->json_value());
    }

    // optional int32 int_value = 3;
    if (has_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_value());
    }

    // optional string string_value = 4;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void business_content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const business_content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const business_content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void business_content::MergeFrom(const business_content& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_business_id()) {
      set_business_id(from.business_id());
    }
    if (from.has_json_value()) {
      set_json_value(from.json_value());
    }
    if (from.has_int_value()) {
      set_int_value(from.int_value());
    }
    if (from.has_string_value()) {
      set_string_value(from.string_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void business_content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void business_content::CopyFrom(const business_content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool business_content::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void business_content::Swap(business_content* other) {
  if (other != this) {
    std::swap(business_id_, other->business_id_);
    std::swap(json_value_, other->json_value_);
    std::swap(int_value_, other->int_value_);
    std::swap(string_value_, other->string_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata business_content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = business_content_descriptor_;
  metadata.reflection = business_content_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int monitor_info_content::kInfosFieldNumber;
#endif  // !_MSC_VER

monitor_info_content::monitor_info_content()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:monitor_info_content)
}

void monitor_info_content::InitAsDefaultInstance() {
}

monitor_info_content::monitor_info_content(const monitor_info_content& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:monitor_info_content)
}

void monitor_info_content::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

monitor_info_content::~monitor_info_content() {
  // @@protoc_insertion_point(destructor:monitor_info_content)
  SharedDtor();
}

void monitor_info_content::SharedDtor() {
  if (this != default_instance_) {
  }
}

void monitor_info_content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* monitor_info_content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return monitor_info_content_descriptor_;
}

const monitor_info_content& monitor_info_content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_business_2eproto();
  return *default_instance_;
}

monitor_info_content* monitor_info_content::default_instance_ = NULL;

monitor_info_content* monitor_info_content::New() const {
  return new monitor_info_content;
}

void monitor_info_content::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool monitor_info_content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:monitor_info_content)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string infos = 1;
      case 1: {
        if (tag == 10) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_infos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->infos(this->infos_size() - 1).data(),
            this->infos(this->infos_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "infos");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:monitor_info_content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:monitor_info_content)
  return false;
#undef DO_
}

void monitor_info_content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:monitor_info_content)
  // repeated string infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->infos(i).data(), this->infos(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "infos");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:monitor_info_content)
}

::google::protobuf::uint8* monitor_info_content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:monitor_info_content)
  // repeated string infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infos(i).data(), this->infos(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "infos");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:monitor_info_content)
  return target;
}

int monitor_info_content::ByteSize() const {
  int total_size = 0;

  // repeated string infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void monitor_info_content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const monitor_info_content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const monitor_info_content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void monitor_info_content::MergeFrom(const monitor_info_content& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void monitor_info_content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void monitor_info_content::CopyFrom(const monitor_info_content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool monitor_info_content::IsInitialized() const {

  return true;
}

void monitor_info_content::Swap(monitor_info_content* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata monitor_info_content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = monitor_info_content_descriptor_;
  metadata.reflection = monitor_info_content_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proxy_heartbeat_content::kThreadCountFieldNumber;
const int proxy_heartbeat_content::kUdpPortFieldNumber;
const int proxy_heartbeat_content::kBusinessCountFieldNumber;
#endif  // !_MSC_VER

proxy_heartbeat_content::proxy_heartbeat_content()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proxy_heartbeat_content)
}

void proxy_heartbeat_content::InitAsDefaultInstance() {
}

proxy_heartbeat_content::proxy_heartbeat_content(const proxy_heartbeat_content& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proxy_heartbeat_content)
}

void proxy_heartbeat_content::SharedCtor() {
  _cached_size_ = 0;
  thread_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proxy_heartbeat_content::~proxy_heartbeat_content() {
  // @@protoc_insertion_point(destructor:proxy_heartbeat_content)
  SharedDtor();
}

void proxy_heartbeat_content::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proxy_heartbeat_content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proxy_heartbeat_content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proxy_heartbeat_content_descriptor_;
}

const proxy_heartbeat_content& proxy_heartbeat_content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_business_2eproto();
  return *default_instance_;
}

proxy_heartbeat_content* proxy_heartbeat_content::default_instance_ = NULL;

proxy_heartbeat_content* proxy_heartbeat_content::New() const {
  return new proxy_heartbeat_content;
}

void proxy_heartbeat_content::Clear() {
  thread_count_ = 0;
  udp_port_.Clear();
  business_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proxy_heartbeat_content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proxy_heartbeat_content)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 thread_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thread_count_)));
          set_has_thread_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_udp_port;
        break;
      }

      // repeated int32 udp_port = 2;
      case 2: {
        if (tag == 16) {
         parse_udp_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_udp_port())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_udp_port())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_udp_port;
        if (input->ExpectTag(24)) goto parse_business_count;
        break;
      }

      // repeated int32 business_count = 3;
      case 3: {
        if (tag == 24) {
         parse_business_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_business_count())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_business_count())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_business_count;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proxy_heartbeat_content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proxy_heartbeat_content)
  return false;
#undef DO_
}

void proxy_heartbeat_content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proxy_heartbeat_content)
  // required int32 thread_count = 1;
  if (has_thread_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->thread_count(), output);
  }

  // repeated int32 udp_port = 2;
  for (int i = 0; i < this->udp_port_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->udp_port(i), output);
  }

  // repeated int32 business_count = 3;
  for (int i = 0; i < this->business_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->business_count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proxy_heartbeat_content)
}

::google::protobuf::uint8* proxy_heartbeat_content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_heartbeat_content)
  // required int32 thread_count = 1;
  if (has_thread_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->thread_count(), target);
  }

  // repeated int32 udp_port = 2;
  for (int i = 0; i < this->udp_port_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->udp_port(i), target);
  }

  // repeated int32 business_count = 3;
  for (int i = 0; i < this->business_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->business_count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_heartbeat_content)
  return target;
}

int proxy_heartbeat_content::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 thread_count = 1;
    if (has_thread_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thread_count());
    }

  }
  // repeated int32 udp_port = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->udp_port_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->udp_port(i));
    }
    total_size += 1 * this->udp_port_size() + data_size;
  }

  // repeated int32 business_count = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->business_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->business_count(i));
    }
    total_size += 1 * this->business_count_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proxy_heartbeat_content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proxy_heartbeat_content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proxy_heartbeat_content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proxy_heartbeat_content::MergeFrom(const proxy_heartbeat_content& from) {
  GOOGLE_CHECK_NE(&from, this);
  udp_port_.MergeFrom(from.udp_port_);
  business_count_.MergeFrom(from.business_count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_thread_count()) {
      set_thread_count(from.thread_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proxy_heartbeat_content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proxy_heartbeat_content::CopyFrom(const proxy_heartbeat_content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proxy_heartbeat_content::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proxy_heartbeat_content::Swap(proxy_heartbeat_content* other) {
  if (other != this) {
    std::swap(thread_count_, other->thread_count_);
    udp_port_.Swap(&other->udp_port_);
    business_count_.Swap(&other->business_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proxy_heartbeat_content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proxy_heartbeat_content_descriptor_;
  metadata.reflection = proxy_heartbeat_content_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
